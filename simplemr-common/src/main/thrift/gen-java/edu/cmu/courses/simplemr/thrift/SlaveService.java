/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package edu.cmu.courses.simplemr.thrift;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class SlaveService {

  public interface Iface {

    public void dfsLockChunk(long chunkId) throws org.apache.thrift.TException;

    public void dfsUnlockChunk(long chunkId) throws org.apache.thrift.TException;

  }

  public interface AsyncIface {

    public void dfsLockChunk(long chunkId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void dfsUnlockChunk(long chunkId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends org.apache.thrift.TServiceClient implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public void dfsLockChunk(long chunkId) throws org.apache.thrift.TException
    {
      send_dfsLockChunk(chunkId);
      recv_dfsLockChunk();
    }

    public void send_dfsLockChunk(long chunkId) throws org.apache.thrift.TException
    {
      dfsLockChunk_args args = new dfsLockChunk_args();
      args.setChunkId(chunkId);
      sendBase("dfsLockChunk", args);
    }

    public void recv_dfsLockChunk() throws org.apache.thrift.TException
    {
      dfsLockChunk_result result = new dfsLockChunk_result();
      receiveBase(result, "dfsLockChunk");
      return;
    }

    public void dfsUnlockChunk(long chunkId) throws org.apache.thrift.TException
    {
      send_dfsUnlockChunk(chunkId);
      recv_dfsUnlockChunk();
    }

    public void send_dfsUnlockChunk(long chunkId) throws org.apache.thrift.TException
    {
      dfsUnlockChunk_args args = new dfsUnlockChunk_args();
      args.setChunkId(chunkId);
      sendBase("dfsUnlockChunk", args);
    }

    public void recv_dfsUnlockChunk() throws org.apache.thrift.TException
    {
      dfsUnlockChunk_result result = new dfsUnlockChunk_result();
      receiveBase(result, "dfsUnlockChunk");
      return;
    }

  }
  public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void dfsLockChunk(long chunkId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      dfsLockChunk_call method_call = new dfsLockChunk_call(chunkId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class dfsLockChunk_call extends org.apache.thrift.async.TAsyncMethodCall {
      private long chunkId;
      public dfsLockChunk_call(long chunkId, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.chunkId = chunkId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("dfsLockChunk", org.apache.thrift.protocol.TMessageType.CALL, 0));
        dfsLockChunk_args args = new dfsLockChunk_args();
        args.setChunkId(chunkId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_dfsLockChunk();
      }
    }

    public void dfsUnlockChunk(long chunkId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      dfsUnlockChunk_call method_call = new dfsUnlockChunk_call(chunkId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class dfsUnlockChunk_call extends org.apache.thrift.async.TAsyncMethodCall {
      private long chunkId;
      public dfsUnlockChunk_call(long chunkId, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.chunkId = chunkId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("dfsUnlockChunk", org.apache.thrift.protocol.TMessageType.CALL, 0));
        dfsUnlockChunk_args args = new dfsUnlockChunk_args();
        args.setChunkId(chunkId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_dfsUnlockChunk();
      }
    }

  }

  public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
    private static final Logger LOGGER = LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> getProcessMap(Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("dfsLockChunk", new dfsLockChunk());
      processMap.put("dfsUnlockChunk", new dfsUnlockChunk());
      return processMap;
    }

    public static class dfsLockChunk<I extends Iface> extends org.apache.thrift.ProcessFunction<I, dfsLockChunk_args> {
      public dfsLockChunk() {
        super("dfsLockChunk");
      }

      public dfsLockChunk_args getEmptyArgsInstance() {
        return new dfsLockChunk_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public dfsLockChunk_result getResult(I iface, dfsLockChunk_args args) throws org.apache.thrift.TException {
        dfsLockChunk_result result = new dfsLockChunk_result();
        iface.dfsLockChunk(args.chunkId);
        return result;
      }
    }

    public static class dfsUnlockChunk<I extends Iface> extends org.apache.thrift.ProcessFunction<I, dfsUnlockChunk_args> {
      public dfsUnlockChunk() {
        super("dfsUnlockChunk");
      }

      public dfsUnlockChunk_args getEmptyArgsInstance() {
        return new dfsUnlockChunk_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public dfsUnlockChunk_result getResult(I iface, dfsUnlockChunk_args args) throws org.apache.thrift.TException {
        dfsUnlockChunk_result result = new dfsUnlockChunk_result();
        iface.dfsUnlockChunk(args.chunkId);
        return result;
      }
    }

  }

  public static class AsyncProcessor<I extends AsyncIface> extends org.apache.thrift.TBaseAsyncProcessor<I> {
    private static final Logger LOGGER = LoggerFactory.getLogger(AsyncProcessor.class.getName());
    public AsyncProcessor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
    }

    protected AsyncProcessor(I iface, Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends AsyncIface> Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase,?>> getProcessMap(Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      processMap.put("dfsLockChunk", new dfsLockChunk());
      processMap.put("dfsUnlockChunk", new dfsUnlockChunk());
      return processMap;
    }

    public static class dfsLockChunk<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, dfsLockChunk_args, Void> {
      public dfsLockChunk() {
        super("dfsLockChunk");
      }

      public dfsLockChunk_args getEmptyArgsInstance() {
        return new dfsLockChunk_args();
      }

      public AsyncMethodCallback<Void> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            dfsLockChunk_result result = new dfsLockChunk_result();
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            dfsLockChunk_result result = new dfsLockChunk_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, dfsLockChunk_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws TException {
        iface.dfsLockChunk(args.chunkId,resultHandler);
      }
    }

    public static class dfsUnlockChunk<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, dfsUnlockChunk_args, Void> {
      public dfsUnlockChunk() {
        super("dfsUnlockChunk");
      }

      public dfsUnlockChunk_args getEmptyArgsInstance() {
        return new dfsUnlockChunk_args();
      }

      public AsyncMethodCallback<Void> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            dfsUnlockChunk_result result = new dfsUnlockChunk_result();
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            dfsUnlockChunk_result result = new dfsUnlockChunk_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, dfsUnlockChunk_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws TException {
        iface.dfsUnlockChunk(args.chunkId,resultHandler);
      }
    }

  }

  public static class dfsLockChunk_args implements org.apache.thrift.TBase<dfsLockChunk_args, dfsLockChunk_args._Fields>, java.io.Serializable, Cloneable, Comparable<dfsLockChunk_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("dfsLockChunk_args");

    private static final org.apache.thrift.protocol.TField CHUNK_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("chunkId", org.apache.thrift.protocol.TType.I64, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new dfsLockChunk_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new dfsLockChunk_argsTupleSchemeFactory());
    }

    public long chunkId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      CHUNK_ID((short)1, "chunkId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // CHUNK_ID
            return CHUNK_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __CHUNKID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.CHUNK_ID, new org.apache.thrift.meta_data.FieldMetaData("chunkId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(dfsLockChunk_args.class, metaDataMap);
    }

    public dfsLockChunk_args() {
    }

    public dfsLockChunk_args(
      long chunkId)
    {
      this();
      this.chunkId = chunkId;
      setChunkIdIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public dfsLockChunk_args(dfsLockChunk_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.chunkId = other.chunkId;
    }

    public dfsLockChunk_args deepCopy() {
      return new dfsLockChunk_args(this);
    }

    @Override
    public void clear() {
      setChunkIdIsSet(false);
      this.chunkId = 0;
    }

    public long getChunkId() {
      return this.chunkId;
    }

    public dfsLockChunk_args setChunkId(long chunkId) {
      this.chunkId = chunkId;
      setChunkIdIsSet(true);
      return this;
    }

    public void unsetChunkId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CHUNKID_ISSET_ID);
    }

    /** Returns true if field chunkId is set (has been assigned a value) and false otherwise */
    public boolean isSetChunkId() {
      return EncodingUtils.testBit(__isset_bitfield, __CHUNKID_ISSET_ID);
    }

    public void setChunkIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CHUNKID_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case CHUNK_ID:
        if (value == null) {
          unsetChunkId();
        } else {
          setChunkId((Long)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case CHUNK_ID:
        return Long.valueOf(getChunkId());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case CHUNK_ID:
        return isSetChunkId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof dfsLockChunk_args)
        return this.equals((dfsLockChunk_args)that);
      return false;
    }

    public boolean equals(dfsLockChunk_args that) {
      if (that == null)
        return false;

      boolean this_present_chunkId = true;
      boolean that_present_chunkId = true;
      if (this_present_chunkId || that_present_chunkId) {
        if (!(this_present_chunkId && that_present_chunkId))
          return false;
        if (this.chunkId != that.chunkId)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(dfsLockChunk_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetChunkId()).compareTo(other.isSetChunkId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetChunkId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.chunkId, other.chunkId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("dfsLockChunk_args(");
      boolean first = true;

      sb.append("chunkId:");
      sb.append(this.chunkId);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class dfsLockChunk_argsStandardSchemeFactory implements SchemeFactory {
      public dfsLockChunk_argsStandardScheme getScheme() {
        return new dfsLockChunk_argsStandardScheme();
      }
    }

    private static class dfsLockChunk_argsStandardScheme extends StandardScheme<dfsLockChunk_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, dfsLockChunk_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // CHUNK_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.chunkId = iprot.readI64();
                struct.setChunkIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, dfsLockChunk_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(CHUNK_ID_FIELD_DESC);
        oprot.writeI64(struct.chunkId);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class dfsLockChunk_argsTupleSchemeFactory implements SchemeFactory {
      public dfsLockChunk_argsTupleScheme getScheme() {
        return new dfsLockChunk_argsTupleScheme();
      }
    }

    private static class dfsLockChunk_argsTupleScheme extends TupleScheme<dfsLockChunk_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, dfsLockChunk_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetChunkId()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetChunkId()) {
          oprot.writeI64(struct.chunkId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, dfsLockChunk_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.chunkId = iprot.readI64();
          struct.setChunkIdIsSet(true);
        }
      }
    }

  }

  public static class dfsLockChunk_result implements org.apache.thrift.TBase<dfsLockChunk_result, dfsLockChunk_result._Fields>, java.io.Serializable, Cloneable, Comparable<dfsLockChunk_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("dfsLockChunk_result");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new dfsLockChunk_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new dfsLockChunk_resultTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(dfsLockChunk_result.class, metaDataMap);
    }

    public dfsLockChunk_result() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public dfsLockChunk_result(dfsLockChunk_result other) {
    }

    public dfsLockChunk_result deepCopy() {
      return new dfsLockChunk_result(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof dfsLockChunk_result)
        return this.equals((dfsLockChunk_result)that);
      return false;
    }

    public boolean equals(dfsLockChunk_result that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(dfsLockChunk_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("dfsLockChunk_result(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class dfsLockChunk_resultStandardSchemeFactory implements SchemeFactory {
      public dfsLockChunk_resultStandardScheme getScheme() {
        return new dfsLockChunk_resultStandardScheme();
      }
    }

    private static class dfsLockChunk_resultStandardScheme extends StandardScheme<dfsLockChunk_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, dfsLockChunk_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, dfsLockChunk_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class dfsLockChunk_resultTupleSchemeFactory implements SchemeFactory {
      public dfsLockChunk_resultTupleScheme getScheme() {
        return new dfsLockChunk_resultTupleScheme();
      }
    }

    private static class dfsLockChunk_resultTupleScheme extends TupleScheme<dfsLockChunk_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, dfsLockChunk_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, dfsLockChunk_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

  public static class dfsUnlockChunk_args implements org.apache.thrift.TBase<dfsUnlockChunk_args, dfsUnlockChunk_args._Fields>, java.io.Serializable, Cloneable, Comparable<dfsUnlockChunk_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("dfsUnlockChunk_args");

    private static final org.apache.thrift.protocol.TField CHUNK_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("chunkId", org.apache.thrift.protocol.TType.I64, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new dfsUnlockChunk_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new dfsUnlockChunk_argsTupleSchemeFactory());
    }

    public long chunkId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      CHUNK_ID((short)1, "chunkId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // CHUNK_ID
            return CHUNK_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __CHUNKID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.CHUNK_ID, new org.apache.thrift.meta_data.FieldMetaData("chunkId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(dfsUnlockChunk_args.class, metaDataMap);
    }

    public dfsUnlockChunk_args() {
    }

    public dfsUnlockChunk_args(
      long chunkId)
    {
      this();
      this.chunkId = chunkId;
      setChunkIdIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public dfsUnlockChunk_args(dfsUnlockChunk_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.chunkId = other.chunkId;
    }

    public dfsUnlockChunk_args deepCopy() {
      return new dfsUnlockChunk_args(this);
    }

    @Override
    public void clear() {
      setChunkIdIsSet(false);
      this.chunkId = 0;
    }

    public long getChunkId() {
      return this.chunkId;
    }

    public dfsUnlockChunk_args setChunkId(long chunkId) {
      this.chunkId = chunkId;
      setChunkIdIsSet(true);
      return this;
    }

    public void unsetChunkId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CHUNKID_ISSET_ID);
    }

    /** Returns true if field chunkId is set (has been assigned a value) and false otherwise */
    public boolean isSetChunkId() {
      return EncodingUtils.testBit(__isset_bitfield, __CHUNKID_ISSET_ID);
    }

    public void setChunkIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CHUNKID_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case CHUNK_ID:
        if (value == null) {
          unsetChunkId();
        } else {
          setChunkId((Long)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case CHUNK_ID:
        return Long.valueOf(getChunkId());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case CHUNK_ID:
        return isSetChunkId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof dfsUnlockChunk_args)
        return this.equals((dfsUnlockChunk_args)that);
      return false;
    }

    public boolean equals(dfsUnlockChunk_args that) {
      if (that == null)
        return false;

      boolean this_present_chunkId = true;
      boolean that_present_chunkId = true;
      if (this_present_chunkId || that_present_chunkId) {
        if (!(this_present_chunkId && that_present_chunkId))
          return false;
        if (this.chunkId != that.chunkId)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(dfsUnlockChunk_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetChunkId()).compareTo(other.isSetChunkId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetChunkId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.chunkId, other.chunkId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("dfsUnlockChunk_args(");
      boolean first = true;

      sb.append("chunkId:");
      sb.append(this.chunkId);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class dfsUnlockChunk_argsStandardSchemeFactory implements SchemeFactory {
      public dfsUnlockChunk_argsStandardScheme getScheme() {
        return new dfsUnlockChunk_argsStandardScheme();
      }
    }

    private static class dfsUnlockChunk_argsStandardScheme extends StandardScheme<dfsUnlockChunk_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, dfsUnlockChunk_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // CHUNK_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.chunkId = iprot.readI64();
                struct.setChunkIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, dfsUnlockChunk_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(CHUNK_ID_FIELD_DESC);
        oprot.writeI64(struct.chunkId);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class dfsUnlockChunk_argsTupleSchemeFactory implements SchemeFactory {
      public dfsUnlockChunk_argsTupleScheme getScheme() {
        return new dfsUnlockChunk_argsTupleScheme();
      }
    }

    private static class dfsUnlockChunk_argsTupleScheme extends TupleScheme<dfsUnlockChunk_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, dfsUnlockChunk_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetChunkId()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetChunkId()) {
          oprot.writeI64(struct.chunkId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, dfsUnlockChunk_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.chunkId = iprot.readI64();
          struct.setChunkIdIsSet(true);
        }
      }
    }

  }

  public static class dfsUnlockChunk_result implements org.apache.thrift.TBase<dfsUnlockChunk_result, dfsUnlockChunk_result._Fields>, java.io.Serializable, Cloneable, Comparable<dfsUnlockChunk_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("dfsUnlockChunk_result");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new dfsUnlockChunk_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new dfsUnlockChunk_resultTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(dfsUnlockChunk_result.class, metaDataMap);
    }

    public dfsUnlockChunk_result() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public dfsUnlockChunk_result(dfsUnlockChunk_result other) {
    }

    public dfsUnlockChunk_result deepCopy() {
      return new dfsUnlockChunk_result(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof dfsUnlockChunk_result)
        return this.equals((dfsUnlockChunk_result)that);
      return false;
    }

    public boolean equals(dfsUnlockChunk_result that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(dfsUnlockChunk_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("dfsUnlockChunk_result(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class dfsUnlockChunk_resultStandardSchemeFactory implements SchemeFactory {
      public dfsUnlockChunk_resultStandardScheme getScheme() {
        return new dfsUnlockChunk_resultStandardScheme();
      }
    }

    private static class dfsUnlockChunk_resultStandardScheme extends StandardScheme<dfsUnlockChunk_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, dfsUnlockChunk_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, dfsUnlockChunk_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class dfsUnlockChunk_resultTupleSchemeFactory implements SchemeFactory {
      public dfsUnlockChunk_resultTupleScheme getScheme() {
        return new dfsUnlockChunk_resultTupleScheme();
      }
    }

    private static class dfsUnlockChunk_resultTupleScheme extends TupleScheme<dfsUnlockChunk_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, dfsUnlockChunk_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, dfsUnlockChunk_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

}
