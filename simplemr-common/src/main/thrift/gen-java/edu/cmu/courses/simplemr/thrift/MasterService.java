/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package edu.cmu.courses.simplemr.thrift;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class MasterService {

  public interface Iface {

    /**
     * The RPC interface for slave
     * 
     * @param location
     * @param holdingChunks
     * @param workload
     */
    public long slaveRegistry(ServiceAddress location, List<Long> holdingChunks, SlaveWorkload workload) throws SlaveOperationException, org.apache.thrift.TException;

    public void slaveHeartbeat(long slaveId, SlaveWorkload workload) throws SlaveOperationException, org.apache.thrift.TException;

    /**
     * The RPC interface for distributed file system
     * 
     * @param name
     * @param mode
     */
    public ClientFile dfsOpen(String name, short mode) throws FileNotExistException, UnknownException, org.apache.thrift.TException;

    public ClientChunk dfsCreateChunk(long fileId) throws FileNotExistException, UnknownException, org.apache.thrift.TException;

    public void dfsClose(long fileId) throws FileNotExistException, UnknownException, org.apache.thrift.TException;

    public ClientFile dfsGetFile(String name) throws FileNotExistException, UnknownException, org.apache.thrift.TException;

    public ClientChunk dfsGetChunk(long fileId, long index) throws FileNotExistException, UnknownException, org.apache.thrift.TException;

    public void dfsDelete(long fileId) throws FileNotExistException, UnknownException, org.apache.thrift.TException;

    public ClientFile dfsRename(long fileId, String newName) throws FileNotExistException, UnknownException, org.apache.thrift.TException;

  }

  public interface AsyncIface {

    public void slaveRegistry(ServiceAddress location, List<Long> holdingChunks, SlaveWorkload workload, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void slaveHeartbeat(long slaveId, SlaveWorkload workload, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void dfsOpen(String name, short mode, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void dfsCreateChunk(long fileId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void dfsClose(long fileId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void dfsGetFile(String name, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void dfsGetChunk(long fileId, long index, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void dfsDelete(long fileId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void dfsRename(long fileId, String newName, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends org.apache.thrift.TServiceClient implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public long slaveRegistry(ServiceAddress location, List<Long> holdingChunks, SlaveWorkload workload) throws SlaveOperationException, org.apache.thrift.TException
    {
      send_slaveRegistry(location, holdingChunks, workload);
      return recv_slaveRegistry();
    }

    public void send_slaveRegistry(ServiceAddress location, List<Long> holdingChunks, SlaveWorkload workload) throws org.apache.thrift.TException
    {
      slaveRegistry_args args = new slaveRegistry_args();
      args.setLocation(location);
      args.setHoldingChunks(holdingChunks);
      args.setWorkload(workload);
      sendBase("slaveRegistry", args);
    }

    public long recv_slaveRegistry() throws SlaveOperationException, org.apache.thrift.TException
    {
      slaveRegistry_result result = new slaveRegistry_result();
      receiveBase(result, "slaveRegistry");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.soe != null) {
        throw result.soe;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "slaveRegistry failed: unknown result");
    }

    public void slaveHeartbeat(long slaveId, SlaveWorkload workload) throws SlaveOperationException, org.apache.thrift.TException
    {
      send_slaveHeartbeat(slaveId, workload);
      recv_slaveHeartbeat();
    }

    public void send_slaveHeartbeat(long slaveId, SlaveWorkload workload) throws org.apache.thrift.TException
    {
      slaveHeartbeat_args args = new slaveHeartbeat_args();
      args.setSlaveId(slaveId);
      args.setWorkload(workload);
      sendBase("slaveHeartbeat", args);
    }

    public void recv_slaveHeartbeat() throws SlaveOperationException, org.apache.thrift.TException
    {
      slaveHeartbeat_result result = new slaveHeartbeat_result();
      receiveBase(result, "slaveHeartbeat");
      if (result.soe != null) {
        throw result.soe;
      }
      return;
    }

    public ClientFile dfsOpen(String name, short mode) throws FileNotExistException, UnknownException, org.apache.thrift.TException
    {
      send_dfsOpen(name, mode);
      return recv_dfsOpen();
    }

    public void send_dfsOpen(String name, short mode) throws org.apache.thrift.TException
    {
      dfsOpen_args args = new dfsOpen_args();
      args.setName(name);
      args.setMode(mode);
      sendBase("dfsOpen", args);
    }

    public ClientFile recv_dfsOpen() throws FileNotExistException, UnknownException, org.apache.thrift.TException
    {
      dfsOpen_result result = new dfsOpen_result();
      receiveBase(result, "dfsOpen");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.fne != null) {
        throw result.fne;
      }
      if (result.une != null) {
        throw result.une;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "dfsOpen failed: unknown result");
    }

    public ClientChunk dfsCreateChunk(long fileId) throws FileNotExistException, UnknownException, org.apache.thrift.TException
    {
      send_dfsCreateChunk(fileId);
      return recv_dfsCreateChunk();
    }

    public void send_dfsCreateChunk(long fileId) throws org.apache.thrift.TException
    {
      dfsCreateChunk_args args = new dfsCreateChunk_args();
      args.setFileId(fileId);
      sendBase("dfsCreateChunk", args);
    }

    public ClientChunk recv_dfsCreateChunk() throws FileNotExistException, UnknownException, org.apache.thrift.TException
    {
      dfsCreateChunk_result result = new dfsCreateChunk_result();
      receiveBase(result, "dfsCreateChunk");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.fne != null) {
        throw result.fne;
      }
      if (result.une != null) {
        throw result.une;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "dfsCreateChunk failed: unknown result");
    }

    public void dfsClose(long fileId) throws FileNotExistException, UnknownException, org.apache.thrift.TException
    {
      send_dfsClose(fileId);
      recv_dfsClose();
    }

    public void send_dfsClose(long fileId) throws org.apache.thrift.TException
    {
      dfsClose_args args = new dfsClose_args();
      args.setFileId(fileId);
      sendBase("dfsClose", args);
    }

    public void recv_dfsClose() throws FileNotExistException, UnknownException, org.apache.thrift.TException
    {
      dfsClose_result result = new dfsClose_result();
      receiveBase(result, "dfsClose");
      if (result.fne != null) {
        throw result.fne;
      }
      if (result.une != null) {
        throw result.une;
      }
      return;
    }

    public ClientFile dfsGetFile(String name) throws FileNotExistException, UnknownException, org.apache.thrift.TException
    {
      send_dfsGetFile(name);
      return recv_dfsGetFile();
    }

    public void send_dfsGetFile(String name) throws org.apache.thrift.TException
    {
      dfsGetFile_args args = new dfsGetFile_args();
      args.setName(name);
      sendBase("dfsGetFile", args);
    }

    public ClientFile recv_dfsGetFile() throws FileNotExistException, UnknownException, org.apache.thrift.TException
    {
      dfsGetFile_result result = new dfsGetFile_result();
      receiveBase(result, "dfsGetFile");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.fne != null) {
        throw result.fne;
      }
      if (result.une != null) {
        throw result.une;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "dfsGetFile failed: unknown result");
    }

    public ClientChunk dfsGetChunk(long fileId, long index) throws FileNotExistException, UnknownException, org.apache.thrift.TException
    {
      send_dfsGetChunk(fileId, index);
      return recv_dfsGetChunk();
    }

    public void send_dfsGetChunk(long fileId, long index) throws org.apache.thrift.TException
    {
      dfsGetChunk_args args = new dfsGetChunk_args();
      args.setFileId(fileId);
      args.setIndex(index);
      sendBase("dfsGetChunk", args);
    }

    public ClientChunk recv_dfsGetChunk() throws FileNotExistException, UnknownException, org.apache.thrift.TException
    {
      dfsGetChunk_result result = new dfsGetChunk_result();
      receiveBase(result, "dfsGetChunk");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.fne != null) {
        throw result.fne;
      }
      if (result.une != null) {
        throw result.une;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "dfsGetChunk failed: unknown result");
    }

    public void dfsDelete(long fileId) throws FileNotExistException, UnknownException, org.apache.thrift.TException
    {
      send_dfsDelete(fileId);
      recv_dfsDelete();
    }

    public void send_dfsDelete(long fileId) throws org.apache.thrift.TException
    {
      dfsDelete_args args = new dfsDelete_args();
      args.setFileId(fileId);
      sendBase("dfsDelete", args);
    }

    public void recv_dfsDelete() throws FileNotExistException, UnknownException, org.apache.thrift.TException
    {
      dfsDelete_result result = new dfsDelete_result();
      receiveBase(result, "dfsDelete");
      if (result.fne != null) {
        throw result.fne;
      }
      if (result.une != null) {
        throw result.une;
      }
      return;
    }

    public ClientFile dfsRename(long fileId, String newName) throws FileNotExistException, UnknownException, org.apache.thrift.TException
    {
      send_dfsRename(fileId, newName);
      return recv_dfsRename();
    }

    public void send_dfsRename(long fileId, String newName) throws org.apache.thrift.TException
    {
      dfsRename_args args = new dfsRename_args();
      args.setFileId(fileId);
      args.setNewName(newName);
      sendBase("dfsRename", args);
    }

    public ClientFile recv_dfsRename() throws FileNotExistException, UnknownException, org.apache.thrift.TException
    {
      dfsRename_result result = new dfsRename_result();
      receiveBase(result, "dfsRename");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.fne != null) {
        throw result.fne;
      }
      if (result.une != null) {
        throw result.une;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "dfsRename failed: unknown result");
    }

  }
  public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void slaveRegistry(ServiceAddress location, List<Long> holdingChunks, SlaveWorkload workload, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      slaveRegistry_call method_call = new slaveRegistry_call(location, holdingChunks, workload, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class slaveRegistry_call extends org.apache.thrift.async.TAsyncMethodCall {
      private ServiceAddress location;
      private List<Long> holdingChunks;
      private SlaveWorkload workload;
      public slaveRegistry_call(ServiceAddress location, List<Long> holdingChunks, SlaveWorkload workload, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.location = location;
        this.holdingChunks = holdingChunks;
        this.workload = workload;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("slaveRegistry", org.apache.thrift.protocol.TMessageType.CALL, 0));
        slaveRegistry_args args = new slaveRegistry_args();
        args.setLocation(location);
        args.setHoldingChunks(holdingChunks);
        args.setWorkload(workload);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public long getResult() throws SlaveOperationException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_slaveRegistry();
      }
    }

    public void slaveHeartbeat(long slaveId, SlaveWorkload workload, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      slaveHeartbeat_call method_call = new slaveHeartbeat_call(slaveId, workload, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class slaveHeartbeat_call extends org.apache.thrift.async.TAsyncMethodCall {
      private long slaveId;
      private SlaveWorkload workload;
      public slaveHeartbeat_call(long slaveId, SlaveWorkload workload, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.slaveId = slaveId;
        this.workload = workload;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("slaveHeartbeat", org.apache.thrift.protocol.TMessageType.CALL, 0));
        slaveHeartbeat_args args = new slaveHeartbeat_args();
        args.setSlaveId(slaveId);
        args.setWorkload(workload);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws SlaveOperationException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_slaveHeartbeat();
      }
    }

    public void dfsOpen(String name, short mode, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      dfsOpen_call method_call = new dfsOpen_call(name, mode, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class dfsOpen_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String name;
      private short mode;
      public dfsOpen_call(String name, short mode, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.name = name;
        this.mode = mode;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("dfsOpen", org.apache.thrift.protocol.TMessageType.CALL, 0));
        dfsOpen_args args = new dfsOpen_args();
        args.setName(name);
        args.setMode(mode);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public ClientFile getResult() throws FileNotExistException, UnknownException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_dfsOpen();
      }
    }

    public void dfsCreateChunk(long fileId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      dfsCreateChunk_call method_call = new dfsCreateChunk_call(fileId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class dfsCreateChunk_call extends org.apache.thrift.async.TAsyncMethodCall {
      private long fileId;
      public dfsCreateChunk_call(long fileId, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.fileId = fileId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("dfsCreateChunk", org.apache.thrift.protocol.TMessageType.CALL, 0));
        dfsCreateChunk_args args = new dfsCreateChunk_args();
        args.setFileId(fileId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public ClientChunk getResult() throws FileNotExistException, UnknownException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_dfsCreateChunk();
      }
    }

    public void dfsClose(long fileId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      dfsClose_call method_call = new dfsClose_call(fileId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class dfsClose_call extends org.apache.thrift.async.TAsyncMethodCall {
      private long fileId;
      public dfsClose_call(long fileId, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.fileId = fileId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("dfsClose", org.apache.thrift.protocol.TMessageType.CALL, 0));
        dfsClose_args args = new dfsClose_args();
        args.setFileId(fileId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws FileNotExistException, UnknownException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_dfsClose();
      }
    }

    public void dfsGetFile(String name, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      dfsGetFile_call method_call = new dfsGetFile_call(name, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class dfsGetFile_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String name;
      public dfsGetFile_call(String name, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.name = name;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("dfsGetFile", org.apache.thrift.protocol.TMessageType.CALL, 0));
        dfsGetFile_args args = new dfsGetFile_args();
        args.setName(name);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public ClientFile getResult() throws FileNotExistException, UnknownException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_dfsGetFile();
      }
    }

    public void dfsGetChunk(long fileId, long index, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      dfsGetChunk_call method_call = new dfsGetChunk_call(fileId, index, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class dfsGetChunk_call extends org.apache.thrift.async.TAsyncMethodCall {
      private long fileId;
      private long index;
      public dfsGetChunk_call(long fileId, long index, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.fileId = fileId;
        this.index = index;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("dfsGetChunk", org.apache.thrift.protocol.TMessageType.CALL, 0));
        dfsGetChunk_args args = new dfsGetChunk_args();
        args.setFileId(fileId);
        args.setIndex(index);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public ClientChunk getResult() throws FileNotExistException, UnknownException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_dfsGetChunk();
      }
    }

    public void dfsDelete(long fileId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      dfsDelete_call method_call = new dfsDelete_call(fileId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class dfsDelete_call extends org.apache.thrift.async.TAsyncMethodCall {
      private long fileId;
      public dfsDelete_call(long fileId, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.fileId = fileId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("dfsDelete", org.apache.thrift.protocol.TMessageType.CALL, 0));
        dfsDelete_args args = new dfsDelete_args();
        args.setFileId(fileId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws FileNotExistException, UnknownException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_dfsDelete();
      }
    }

    public void dfsRename(long fileId, String newName, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      dfsRename_call method_call = new dfsRename_call(fileId, newName, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class dfsRename_call extends org.apache.thrift.async.TAsyncMethodCall {
      private long fileId;
      private String newName;
      public dfsRename_call(long fileId, String newName, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.fileId = fileId;
        this.newName = newName;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("dfsRename", org.apache.thrift.protocol.TMessageType.CALL, 0));
        dfsRename_args args = new dfsRename_args();
        args.setFileId(fileId);
        args.setNewName(newName);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public ClientFile getResult() throws FileNotExistException, UnknownException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_dfsRename();
      }
    }

  }

  public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
    private static final Logger LOGGER = LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> getProcessMap(Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("slaveRegistry", new slaveRegistry());
      processMap.put("slaveHeartbeat", new slaveHeartbeat());
      processMap.put("dfsOpen", new dfsOpen());
      processMap.put("dfsCreateChunk", new dfsCreateChunk());
      processMap.put("dfsClose", new dfsClose());
      processMap.put("dfsGetFile", new dfsGetFile());
      processMap.put("dfsGetChunk", new dfsGetChunk());
      processMap.put("dfsDelete", new dfsDelete());
      processMap.put("dfsRename", new dfsRename());
      return processMap;
    }

    public static class slaveRegistry<I extends Iface> extends org.apache.thrift.ProcessFunction<I, slaveRegistry_args> {
      public slaveRegistry() {
        super("slaveRegistry");
      }

      public slaveRegistry_args getEmptyArgsInstance() {
        return new slaveRegistry_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public slaveRegistry_result getResult(I iface, slaveRegistry_args args) throws org.apache.thrift.TException {
        slaveRegistry_result result = new slaveRegistry_result();
        try {
          result.success = iface.slaveRegistry(args.location, args.holdingChunks, args.workload);
          result.setSuccessIsSet(true);
        } catch (SlaveOperationException soe) {
          result.soe = soe;
        }
        return result;
      }
    }

    public static class slaveHeartbeat<I extends Iface> extends org.apache.thrift.ProcessFunction<I, slaveHeartbeat_args> {
      public slaveHeartbeat() {
        super("slaveHeartbeat");
      }

      public slaveHeartbeat_args getEmptyArgsInstance() {
        return new slaveHeartbeat_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public slaveHeartbeat_result getResult(I iface, slaveHeartbeat_args args) throws org.apache.thrift.TException {
        slaveHeartbeat_result result = new slaveHeartbeat_result();
        try {
          iface.slaveHeartbeat(args.slaveId, args.workload);
        } catch (SlaveOperationException soe) {
          result.soe = soe;
        }
        return result;
      }
    }

    public static class dfsOpen<I extends Iface> extends org.apache.thrift.ProcessFunction<I, dfsOpen_args> {
      public dfsOpen() {
        super("dfsOpen");
      }

      public dfsOpen_args getEmptyArgsInstance() {
        return new dfsOpen_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public dfsOpen_result getResult(I iface, dfsOpen_args args) throws org.apache.thrift.TException {
        dfsOpen_result result = new dfsOpen_result();
        try {
          result.success = iface.dfsOpen(args.name, args.mode);
        } catch (FileNotExistException fne) {
          result.fne = fne;
        } catch (UnknownException une) {
          result.une = une;
        }
        return result;
      }
    }

    public static class dfsCreateChunk<I extends Iface> extends org.apache.thrift.ProcessFunction<I, dfsCreateChunk_args> {
      public dfsCreateChunk() {
        super("dfsCreateChunk");
      }

      public dfsCreateChunk_args getEmptyArgsInstance() {
        return new dfsCreateChunk_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public dfsCreateChunk_result getResult(I iface, dfsCreateChunk_args args) throws org.apache.thrift.TException {
        dfsCreateChunk_result result = new dfsCreateChunk_result();
        try {
          result.success = iface.dfsCreateChunk(args.fileId);
        } catch (FileNotExistException fne) {
          result.fne = fne;
        } catch (UnknownException une) {
          result.une = une;
        }
        return result;
      }
    }

    public static class dfsClose<I extends Iface> extends org.apache.thrift.ProcessFunction<I, dfsClose_args> {
      public dfsClose() {
        super("dfsClose");
      }

      public dfsClose_args getEmptyArgsInstance() {
        return new dfsClose_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public dfsClose_result getResult(I iface, dfsClose_args args) throws org.apache.thrift.TException {
        dfsClose_result result = new dfsClose_result();
        try {
          iface.dfsClose(args.fileId);
        } catch (FileNotExistException fne) {
          result.fne = fne;
        } catch (UnknownException une) {
          result.une = une;
        }
        return result;
      }
    }

    public static class dfsGetFile<I extends Iface> extends org.apache.thrift.ProcessFunction<I, dfsGetFile_args> {
      public dfsGetFile() {
        super("dfsGetFile");
      }

      public dfsGetFile_args getEmptyArgsInstance() {
        return new dfsGetFile_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public dfsGetFile_result getResult(I iface, dfsGetFile_args args) throws org.apache.thrift.TException {
        dfsGetFile_result result = new dfsGetFile_result();
        try {
          result.success = iface.dfsGetFile(args.name);
        } catch (FileNotExistException fne) {
          result.fne = fne;
        } catch (UnknownException une) {
          result.une = une;
        }
        return result;
      }
    }

    public static class dfsGetChunk<I extends Iface> extends org.apache.thrift.ProcessFunction<I, dfsGetChunk_args> {
      public dfsGetChunk() {
        super("dfsGetChunk");
      }

      public dfsGetChunk_args getEmptyArgsInstance() {
        return new dfsGetChunk_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public dfsGetChunk_result getResult(I iface, dfsGetChunk_args args) throws org.apache.thrift.TException {
        dfsGetChunk_result result = new dfsGetChunk_result();
        try {
          result.success = iface.dfsGetChunk(args.fileId, args.index);
        } catch (FileNotExistException fne) {
          result.fne = fne;
        } catch (UnknownException une) {
          result.une = une;
        }
        return result;
      }
    }

    public static class dfsDelete<I extends Iface> extends org.apache.thrift.ProcessFunction<I, dfsDelete_args> {
      public dfsDelete() {
        super("dfsDelete");
      }

      public dfsDelete_args getEmptyArgsInstance() {
        return new dfsDelete_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public dfsDelete_result getResult(I iface, dfsDelete_args args) throws org.apache.thrift.TException {
        dfsDelete_result result = new dfsDelete_result();
        try {
          iface.dfsDelete(args.fileId);
        } catch (FileNotExistException fne) {
          result.fne = fne;
        } catch (UnknownException une) {
          result.une = une;
        }
        return result;
      }
    }

    public static class dfsRename<I extends Iface> extends org.apache.thrift.ProcessFunction<I, dfsRename_args> {
      public dfsRename() {
        super("dfsRename");
      }

      public dfsRename_args getEmptyArgsInstance() {
        return new dfsRename_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public dfsRename_result getResult(I iface, dfsRename_args args) throws org.apache.thrift.TException {
        dfsRename_result result = new dfsRename_result();
        try {
          result.success = iface.dfsRename(args.fileId, args.newName);
        } catch (FileNotExistException fne) {
          result.fne = fne;
        } catch (UnknownException une) {
          result.une = une;
        }
        return result;
      }
    }

  }

  public static class AsyncProcessor<I extends AsyncIface> extends org.apache.thrift.TBaseAsyncProcessor<I> {
    private static final Logger LOGGER = LoggerFactory.getLogger(AsyncProcessor.class.getName());
    public AsyncProcessor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
    }

    protected AsyncProcessor(I iface, Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends AsyncIface> Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase,?>> getProcessMap(Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      processMap.put("slaveRegistry", new slaveRegistry());
      processMap.put("slaveHeartbeat", new slaveHeartbeat());
      processMap.put("dfsOpen", new dfsOpen());
      processMap.put("dfsCreateChunk", new dfsCreateChunk());
      processMap.put("dfsClose", new dfsClose());
      processMap.put("dfsGetFile", new dfsGetFile());
      processMap.put("dfsGetChunk", new dfsGetChunk());
      processMap.put("dfsDelete", new dfsDelete());
      processMap.put("dfsRename", new dfsRename());
      return processMap;
    }

    public static class slaveRegistry<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, slaveRegistry_args, Long> {
      public slaveRegistry() {
        super("slaveRegistry");
      }

      public slaveRegistry_args getEmptyArgsInstance() {
        return new slaveRegistry_args();
      }

      public AsyncMethodCallback<Long> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Long>() { 
          public void onComplete(Long o) {
            slaveRegistry_result result = new slaveRegistry_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            slaveRegistry_result result = new slaveRegistry_result();
            if (e instanceof SlaveOperationException) {
                        result.soe = (SlaveOperationException) e;
                        result.setSoeIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, slaveRegistry_args args, org.apache.thrift.async.AsyncMethodCallback<Long> resultHandler) throws TException {
        iface.slaveRegistry(args.location, args.holdingChunks, args.workload,resultHandler);
      }
    }

    public static class slaveHeartbeat<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, slaveHeartbeat_args, Void> {
      public slaveHeartbeat() {
        super("slaveHeartbeat");
      }

      public slaveHeartbeat_args getEmptyArgsInstance() {
        return new slaveHeartbeat_args();
      }

      public AsyncMethodCallback<Void> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            slaveHeartbeat_result result = new slaveHeartbeat_result();
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            slaveHeartbeat_result result = new slaveHeartbeat_result();
            if (e instanceof SlaveOperationException) {
                        result.soe = (SlaveOperationException) e;
                        result.setSoeIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, slaveHeartbeat_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws TException {
        iface.slaveHeartbeat(args.slaveId, args.workload,resultHandler);
      }
    }

    public static class dfsOpen<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, dfsOpen_args, ClientFile> {
      public dfsOpen() {
        super("dfsOpen");
      }

      public dfsOpen_args getEmptyArgsInstance() {
        return new dfsOpen_args();
      }

      public AsyncMethodCallback<ClientFile> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<ClientFile>() { 
          public void onComplete(ClientFile o) {
            dfsOpen_result result = new dfsOpen_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            dfsOpen_result result = new dfsOpen_result();
            if (e instanceof FileNotExistException) {
                        result.fne = (FileNotExistException) e;
                        result.setFneIsSet(true);
                        msg = result;
            }
            else             if (e instanceof UnknownException) {
                        result.une = (UnknownException) e;
                        result.setUneIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, dfsOpen_args args, org.apache.thrift.async.AsyncMethodCallback<ClientFile> resultHandler) throws TException {
        iface.dfsOpen(args.name, args.mode,resultHandler);
      }
    }

    public static class dfsCreateChunk<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, dfsCreateChunk_args, ClientChunk> {
      public dfsCreateChunk() {
        super("dfsCreateChunk");
      }

      public dfsCreateChunk_args getEmptyArgsInstance() {
        return new dfsCreateChunk_args();
      }

      public AsyncMethodCallback<ClientChunk> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<ClientChunk>() { 
          public void onComplete(ClientChunk o) {
            dfsCreateChunk_result result = new dfsCreateChunk_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            dfsCreateChunk_result result = new dfsCreateChunk_result();
            if (e instanceof FileNotExistException) {
                        result.fne = (FileNotExistException) e;
                        result.setFneIsSet(true);
                        msg = result;
            }
            else             if (e instanceof UnknownException) {
                        result.une = (UnknownException) e;
                        result.setUneIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, dfsCreateChunk_args args, org.apache.thrift.async.AsyncMethodCallback<ClientChunk> resultHandler) throws TException {
        iface.dfsCreateChunk(args.fileId,resultHandler);
      }
    }

    public static class dfsClose<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, dfsClose_args, Void> {
      public dfsClose() {
        super("dfsClose");
      }

      public dfsClose_args getEmptyArgsInstance() {
        return new dfsClose_args();
      }

      public AsyncMethodCallback<Void> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            dfsClose_result result = new dfsClose_result();
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            dfsClose_result result = new dfsClose_result();
            if (e instanceof FileNotExistException) {
                        result.fne = (FileNotExistException) e;
                        result.setFneIsSet(true);
                        msg = result;
            }
            else             if (e instanceof UnknownException) {
                        result.une = (UnknownException) e;
                        result.setUneIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, dfsClose_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws TException {
        iface.dfsClose(args.fileId,resultHandler);
      }
    }

    public static class dfsGetFile<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, dfsGetFile_args, ClientFile> {
      public dfsGetFile() {
        super("dfsGetFile");
      }

      public dfsGetFile_args getEmptyArgsInstance() {
        return new dfsGetFile_args();
      }

      public AsyncMethodCallback<ClientFile> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<ClientFile>() { 
          public void onComplete(ClientFile o) {
            dfsGetFile_result result = new dfsGetFile_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            dfsGetFile_result result = new dfsGetFile_result();
            if (e instanceof FileNotExistException) {
                        result.fne = (FileNotExistException) e;
                        result.setFneIsSet(true);
                        msg = result;
            }
            else             if (e instanceof UnknownException) {
                        result.une = (UnknownException) e;
                        result.setUneIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, dfsGetFile_args args, org.apache.thrift.async.AsyncMethodCallback<ClientFile> resultHandler) throws TException {
        iface.dfsGetFile(args.name,resultHandler);
      }
    }

    public static class dfsGetChunk<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, dfsGetChunk_args, ClientChunk> {
      public dfsGetChunk() {
        super("dfsGetChunk");
      }

      public dfsGetChunk_args getEmptyArgsInstance() {
        return new dfsGetChunk_args();
      }

      public AsyncMethodCallback<ClientChunk> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<ClientChunk>() { 
          public void onComplete(ClientChunk o) {
            dfsGetChunk_result result = new dfsGetChunk_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            dfsGetChunk_result result = new dfsGetChunk_result();
            if (e instanceof FileNotExistException) {
                        result.fne = (FileNotExistException) e;
                        result.setFneIsSet(true);
                        msg = result;
            }
            else             if (e instanceof UnknownException) {
                        result.une = (UnknownException) e;
                        result.setUneIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, dfsGetChunk_args args, org.apache.thrift.async.AsyncMethodCallback<ClientChunk> resultHandler) throws TException {
        iface.dfsGetChunk(args.fileId, args.index,resultHandler);
      }
    }

    public static class dfsDelete<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, dfsDelete_args, Void> {
      public dfsDelete() {
        super("dfsDelete");
      }

      public dfsDelete_args getEmptyArgsInstance() {
        return new dfsDelete_args();
      }

      public AsyncMethodCallback<Void> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            dfsDelete_result result = new dfsDelete_result();
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            dfsDelete_result result = new dfsDelete_result();
            if (e instanceof FileNotExistException) {
                        result.fne = (FileNotExistException) e;
                        result.setFneIsSet(true);
                        msg = result;
            }
            else             if (e instanceof UnknownException) {
                        result.une = (UnknownException) e;
                        result.setUneIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, dfsDelete_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws TException {
        iface.dfsDelete(args.fileId,resultHandler);
      }
    }

    public static class dfsRename<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, dfsRename_args, ClientFile> {
      public dfsRename() {
        super("dfsRename");
      }

      public dfsRename_args getEmptyArgsInstance() {
        return new dfsRename_args();
      }

      public AsyncMethodCallback<ClientFile> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<ClientFile>() { 
          public void onComplete(ClientFile o) {
            dfsRename_result result = new dfsRename_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            dfsRename_result result = new dfsRename_result();
            if (e instanceof FileNotExistException) {
                        result.fne = (FileNotExistException) e;
                        result.setFneIsSet(true);
                        msg = result;
            }
            else             if (e instanceof UnknownException) {
                        result.une = (UnknownException) e;
                        result.setUneIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, dfsRename_args args, org.apache.thrift.async.AsyncMethodCallback<ClientFile> resultHandler) throws TException {
        iface.dfsRename(args.fileId, args.newName,resultHandler);
      }
    }

  }

  public static class slaveRegistry_args implements org.apache.thrift.TBase<slaveRegistry_args, slaveRegistry_args._Fields>, java.io.Serializable, Cloneable, Comparable<slaveRegistry_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("slaveRegistry_args");

    private static final org.apache.thrift.protocol.TField LOCATION_FIELD_DESC = new org.apache.thrift.protocol.TField("location", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField HOLDING_CHUNKS_FIELD_DESC = new org.apache.thrift.protocol.TField("holdingChunks", org.apache.thrift.protocol.TType.LIST, (short)2);
    private static final org.apache.thrift.protocol.TField WORKLOAD_FIELD_DESC = new org.apache.thrift.protocol.TField("workload", org.apache.thrift.protocol.TType.STRUCT, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new slaveRegistry_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new slaveRegistry_argsTupleSchemeFactory());
    }

    public ServiceAddress location; // required
    public List<Long> holdingChunks; // required
    public SlaveWorkload workload; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      LOCATION((short)1, "location"),
      HOLDING_CHUNKS((short)2, "holdingChunks"),
      WORKLOAD((short)3, "workload");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // LOCATION
            return LOCATION;
          case 2: // HOLDING_CHUNKS
            return HOLDING_CHUNKS;
          case 3: // WORKLOAD
            return WORKLOAD;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.LOCATION, new org.apache.thrift.meta_data.FieldMetaData("location", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ServiceAddress.class)));
      tmpMap.put(_Fields.HOLDING_CHUNKS, new org.apache.thrift.meta_data.FieldMetaData("holdingChunks", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64))));
      tmpMap.put(_Fields.WORKLOAD, new org.apache.thrift.meta_data.FieldMetaData("workload", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, SlaveWorkload.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(slaveRegistry_args.class, metaDataMap);
    }

    public slaveRegistry_args() {
    }

    public slaveRegistry_args(
      ServiceAddress location,
      List<Long> holdingChunks,
      SlaveWorkload workload)
    {
      this();
      this.location = location;
      this.holdingChunks = holdingChunks;
      this.workload = workload;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public slaveRegistry_args(slaveRegistry_args other) {
      if (other.isSetLocation()) {
        this.location = new ServiceAddress(other.location);
      }
      if (other.isSetHoldingChunks()) {
        List<Long> __this__holdingChunks = new ArrayList<Long>(other.holdingChunks);
        this.holdingChunks = __this__holdingChunks;
      }
      if (other.isSetWorkload()) {
        this.workload = new SlaveWorkload(other.workload);
      }
    }

    public slaveRegistry_args deepCopy() {
      return new slaveRegistry_args(this);
    }

    @Override
    public void clear() {
      this.location = null;
      this.holdingChunks = null;
      this.workload = null;
    }

    public ServiceAddress getLocation() {
      return this.location;
    }

    public slaveRegistry_args setLocation(ServiceAddress location) {
      this.location = location;
      return this;
    }

    public void unsetLocation() {
      this.location = null;
    }

    /** Returns true if field location is set (has been assigned a value) and false otherwise */
    public boolean isSetLocation() {
      return this.location != null;
    }

    public void setLocationIsSet(boolean value) {
      if (!value) {
        this.location = null;
      }
    }

    public int getHoldingChunksSize() {
      return (this.holdingChunks == null) ? 0 : this.holdingChunks.size();
    }

    public java.util.Iterator<Long> getHoldingChunksIterator() {
      return (this.holdingChunks == null) ? null : this.holdingChunks.iterator();
    }

    public void addToHoldingChunks(long elem) {
      if (this.holdingChunks == null) {
        this.holdingChunks = new ArrayList<Long>();
      }
      this.holdingChunks.add(elem);
    }

    public List<Long> getHoldingChunks() {
      return this.holdingChunks;
    }

    public slaveRegistry_args setHoldingChunks(List<Long> holdingChunks) {
      this.holdingChunks = holdingChunks;
      return this;
    }

    public void unsetHoldingChunks() {
      this.holdingChunks = null;
    }

    /** Returns true if field holdingChunks is set (has been assigned a value) and false otherwise */
    public boolean isSetHoldingChunks() {
      return this.holdingChunks != null;
    }

    public void setHoldingChunksIsSet(boolean value) {
      if (!value) {
        this.holdingChunks = null;
      }
    }

    public SlaveWorkload getWorkload() {
      return this.workload;
    }

    public slaveRegistry_args setWorkload(SlaveWorkload workload) {
      this.workload = workload;
      return this;
    }

    public void unsetWorkload() {
      this.workload = null;
    }

    /** Returns true if field workload is set (has been assigned a value) and false otherwise */
    public boolean isSetWorkload() {
      return this.workload != null;
    }

    public void setWorkloadIsSet(boolean value) {
      if (!value) {
        this.workload = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case LOCATION:
        if (value == null) {
          unsetLocation();
        } else {
          setLocation((ServiceAddress)value);
        }
        break;

      case HOLDING_CHUNKS:
        if (value == null) {
          unsetHoldingChunks();
        } else {
          setHoldingChunks((List<Long>)value);
        }
        break;

      case WORKLOAD:
        if (value == null) {
          unsetWorkload();
        } else {
          setWorkload((SlaveWorkload)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case LOCATION:
        return getLocation();

      case HOLDING_CHUNKS:
        return getHoldingChunks();

      case WORKLOAD:
        return getWorkload();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case LOCATION:
        return isSetLocation();
      case HOLDING_CHUNKS:
        return isSetHoldingChunks();
      case WORKLOAD:
        return isSetWorkload();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof slaveRegistry_args)
        return this.equals((slaveRegistry_args)that);
      return false;
    }

    public boolean equals(slaveRegistry_args that) {
      if (that == null)
        return false;

      boolean this_present_location = true && this.isSetLocation();
      boolean that_present_location = true && that.isSetLocation();
      if (this_present_location || that_present_location) {
        if (!(this_present_location && that_present_location))
          return false;
        if (!this.location.equals(that.location))
          return false;
      }

      boolean this_present_holdingChunks = true && this.isSetHoldingChunks();
      boolean that_present_holdingChunks = true && that.isSetHoldingChunks();
      if (this_present_holdingChunks || that_present_holdingChunks) {
        if (!(this_present_holdingChunks && that_present_holdingChunks))
          return false;
        if (!this.holdingChunks.equals(that.holdingChunks))
          return false;
      }

      boolean this_present_workload = true && this.isSetWorkload();
      boolean that_present_workload = true && that.isSetWorkload();
      if (this_present_workload || that_present_workload) {
        if (!(this_present_workload && that_present_workload))
          return false;
        if (!this.workload.equals(that.workload))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(slaveRegistry_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetLocation()).compareTo(other.isSetLocation());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetLocation()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.location, other.location);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetHoldingChunks()).compareTo(other.isSetHoldingChunks());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetHoldingChunks()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.holdingChunks, other.holdingChunks);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetWorkload()).compareTo(other.isSetWorkload());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetWorkload()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.workload, other.workload);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("slaveRegistry_args(");
      boolean first = true;

      sb.append("location:");
      if (this.location == null) {
        sb.append("null");
      } else {
        sb.append(this.location);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("holdingChunks:");
      if (this.holdingChunks == null) {
        sb.append("null");
      } else {
        sb.append(this.holdingChunks);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("workload:");
      if (this.workload == null) {
        sb.append("null");
      } else {
        sb.append(this.workload);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (location != null) {
        location.validate();
      }
      if (workload != null) {
        workload.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class slaveRegistry_argsStandardSchemeFactory implements SchemeFactory {
      public slaveRegistry_argsStandardScheme getScheme() {
        return new slaveRegistry_argsStandardScheme();
      }
    }

    private static class slaveRegistry_argsStandardScheme extends StandardScheme<slaveRegistry_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, slaveRegistry_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // LOCATION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.location = new ServiceAddress();
                struct.location.read(iprot);
                struct.setLocationIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // HOLDING_CHUNKS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list16 = iprot.readListBegin();
                  struct.holdingChunks = new ArrayList<Long>(_list16.size);
                  for (int _i17 = 0; _i17 < _list16.size; ++_i17)
                  {
                    long _elem18;
                    _elem18 = iprot.readI64();
                    struct.holdingChunks.add(_elem18);
                  }
                  iprot.readListEnd();
                }
                struct.setHoldingChunksIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // WORKLOAD
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.workload = new SlaveWorkload();
                struct.workload.read(iprot);
                struct.setWorkloadIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, slaveRegistry_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.location != null) {
          oprot.writeFieldBegin(LOCATION_FIELD_DESC);
          struct.location.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.holdingChunks != null) {
          oprot.writeFieldBegin(HOLDING_CHUNKS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I64, struct.holdingChunks.size()));
            for (long _iter19 : struct.holdingChunks)
            {
              oprot.writeI64(_iter19);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.workload != null) {
          oprot.writeFieldBegin(WORKLOAD_FIELD_DESC);
          struct.workload.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class slaveRegistry_argsTupleSchemeFactory implements SchemeFactory {
      public slaveRegistry_argsTupleScheme getScheme() {
        return new slaveRegistry_argsTupleScheme();
      }
    }

    private static class slaveRegistry_argsTupleScheme extends TupleScheme<slaveRegistry_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, slaveRegistry_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetLocation()) {
          optionals.set(0);
        }
        if (struct.isSetHoldingChunks()) {
          optionals.set(1);
        }
        if (struct.isSetWorkload()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetLocation()) {
          struct.location.write(oprot);
        }
        if (struct.isSetHoldingChunks()) {
          {
            oprot.writeI32(struct.holdingChunks.size());
            for (long _iter20 : struct.holdingChunks)
            {
              oprot.writeI64(_iter20);
            }
          }
        }
        if (struct.isSetWorkload()) {
          struct.workload.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, slaveRegistry_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.location = new ServiceAddress();
          struct.location.read(iprot);
          struct.setLocationIsSet(true);
        }
        if (incoming.get(1)) {
          {
            org.apache.thrift.protocol.TList _list21 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I64, iprot.readI32());
            struct.holdingChunks = new ArrayList<Long>(_list21.size);
            for (int _i22 = 0; _i22 < _list21.size; ++_i22)
            {
              long _elem23;
              _elem23 = iprot.readI64();
              struct.holdingChunks.add(_elem23);
            }
          }
          struct.setHoldingChunksIsSet(true);
        }
        if (incoming.get(2)) {
          struct.workload = new SlaveWorkload();
          struct.workload.read(iprot);
          struct.setWorkloadIsSet(true);
        }
      }
    }

  }

  public static class slaveRegistry_result implements org.apache.thrift.TBase<slaveRegistry_result, slaveRegistry_result._Fields>, java.io.Serializable, Cloneable, Comparable<slaveRegistry_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("slaveRegistry_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I64, (short)0);
    private static final org.apache.thrift.protocol.TField SOE_FIELD_DESC = new org.apache.thrift.protocol.TField("soe", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new slaveRegistry_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new slaveRegistry_resultTupleSchemeFactory());
    }

    public long success; // required
    public SlaveOperationException soe; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      SOE((short)1, "soe");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // SOE
            return SOE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.SOE, new org.apache.thrift.meta_data.FieldMetaData("soe", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(slaveRegistry_result.class, metaDataMap);
    }

    public slaveRegistry_result() {
    }

    public slaveRegistry_result(
      long success,
      SlaveOperationException soe)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
      this.soe = soe;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public slaveRegistry_result(slaveRegistry_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
      if (other.isSetSoe()) {
        this.soe = new SlaveOperationException(other.soe);
      }
    }

    public slaveRegistry_result deepCopy() {
      return new slaveRegistry_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
      this.soe = null;
    }

    public long getSuccess() {
      return this.success;
    }

    public slaveRegistry_result setSuccess(long success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public SlaveOperationException getSoe() {
      return this.soe;
    }

    public slaveRegistry_result setSoe(SlaveOperationException soe) {
      this.soe = soe;
      return this;
    }

    public void unsetSoe() {
      this.soe = null;
    }

    /** Returns true if field soe is set (has been assigned a value) and false otherwise */
    public boolean isSetSoe() {
      return this.soe != null;
    }

    public void setSoeIsSet(boolean value) {
      if (!value) {
        this.soe = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Long)value);
        }
        break;

      case SOE:
        if (value == null) {
          unsetSoe();
        } else {
          setSoe((SlaveOperationException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Long.valueOf(getSuccess());

      case SOE:
        return getSoe();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case SOE:
        return isSetSoe();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof slaveRegistry_result)
        return this.equals((slaveRegistry_result)that);
      return false;
    }

    public boolean equals(slaveRegistry_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      boolean this_present_soe = true && this.isSetSoe();
      boolean that_present_soe = true && that.isSetSoe();
      if (this_present_soe || that_present_soe) {
        if (!(this_present_soe && that_present_soe))
          return false;
        if (!this.soe.equals(that.soe))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(slaveRegistry_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetSoe()).compareTo(other.isSetSoe());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSoe()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.soe, other.soe);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("slaveRegistry_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      if (!first) sb.append(", ");
      sb.append("soe:");
      if (this.soe == null) {
        sb.append("null");
      } else {
        sb.append(this.soe);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class slaveRegistry_resultStandardSchemeFactory implements SchemeFactory {
      public slaveRegistry_resultStandardScheme getScheme() {
        return new slaveRegistry_resultStandardScheme();
      }
    }

    private static class slaveRegistry_resultStandardScheme extends StandardScheme<slaveRegistry_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, slaveRegistry_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.success = iprot.readI64();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // SOE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.soe = new SlaveOperationException();
                struct.soe.read(iprot);
                struct.setSoeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, slaveRegistry_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI64(struct.success);
          oprot.writeFieldEnd();
        }
        if (struct.soe != null) {
          oprot.writeFieldBegin(SOE_FIELD_DESC);
          struct.soe.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class slaveRegistry_resultTupleSchemeFactory implements SchemeFactory {
      public slaveRegistry_resultTupleScheme getScheme() {
        return new slaveRegistry_resultTupleScheme();
      }
    }

    private static class slaveRegistry_resultTupleScheme extends TupleScheme<slaveRegistry_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, slaveRegistry_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetSoe()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          oprot.writeI64(struct.success);
        }
        if (struct.isSetSoe()) {
          struct.soe.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, slaveRegistry_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = iprot.readI64();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.soe = new SlaveOperationException();
          struct.soe.read(iprot);
          struct.setSoeIsSet(true);
        }
      }
    }

  }

  public static class slaveHeartbeat_args implements org.apache.thrift.TBase<slaveHeartbeat_args, slaveHeartbeat_args._Fields>, java.io.Serializable, Cloneable, Comparable<slaveHeartbeat_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("slaveHeartbeat_args");

    private static final org.apache.thrift.protocol.TField SLAVE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("slaveId", org.apache.thrift.protocol.TType.I64, (short)1);
    private static final org.apache.thrift.protocol.TField WORKLOAD_FIELD_DESC = new org.apache.thrift.protocol.TField("workload", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new slaveHeartbeat_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new slaveHeartbeat_argsTupleSchemeFactory());
    }

    public long slaveId; // required
    public SlaveWorkload workload; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SLAVE_ID((short)1, "slaveId"),
      WORKLOAD((short)2, "workload");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // SLAVE_ID
            return SLAVE_ID;
          case 2: // WORKLOAD
            return WORKLOAD;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SLAVEID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SLAVE_ID, new org.apache.thrift.meta_data.FieldMetaData("slaveId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.WORKLOAD, new org.apache.thrift.meta_data.FieldMetaData("workload", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, SlaveWorkload.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(slaveHeartbeat_args.class, metaDataMap);
    }

    public slaveHeartbeat_args() {
    }

    public slaveHeartbeat_args(
      long slaveId,
      SlaveWorkload workload)
    {
      this();
      this.slaveId = slaveId;
      setSlaveIdIsSet(true);
      this.workload = workload;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public slaveHeartbeat_args(slaveHeartbeat_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.slaveId = other.slaveId;
      if (other.isSetWorkload()) {
        this.workload = new SlaveWorkload(other.workload);
      }
    }

    public slaveHeartbeat_args deepCopy() {
      return new slaveHeartbeat_args(this);
    }

    @Override
    public void clear() {
      setSlaveIdIsSet(false);
      this.slaveId = 0;
      this.workload = null;
    }

    public long getSlaveId() {
      return this.slaveId;
    }

    public slaveHeartbeat_args setSlaveId(long slaveId) {
      this.slaveId = slaveId;
      setSlaveIdIsSet(true);
      return this;
    }

    public void unsetSlaveId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SLAVEID_ISSET_ID);
    }

    /** Returns true if field slaveId is set (has been assigned a value) and false otherwise */
    public boolean isSetSlaveId() {
      return EncodingUtils.testBit(__isset_bitfield, __SLAVEID_ISSET_ID);
    }

    public void setSlaveIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SLAVEID_ISSET_ID, value);
    }

    public SlaveWorkload getWorkload() {
      return this.workload;
    }

    public slaveHeartbeat_args setWorkload(SlaveWorkload workload) {
      this.workload = workload;
      return this;
    }

    public void unsetWorkload() {
      this.workload = null;
    }

    /** Returns true if field workload is set (has been assigned a value) and false otherwise */
    public boolean isSetWorkload() {
      return this.workload != null;
    }

    public void setWorkloadIsSet(boolean value) {
      if (!value) {
        this.workload = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SLAVE_ID:
        if (value == null) {
          unsetSlaveId();
        } else {
          setSlaveId((Long)value);
        }
        break;

      case WORKLOAD:
        if (value == null) {
          unsetWorkload();
        } else {
          setWorkload((SlaveWorkload)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SLAVE_ID:
        return Long.valueOf(getSlaveId());

      case WORKLOAD:
        return getWorkload();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SLAVE_ID:
        return isSetSlaveId();
      case WORKLOAD:
        return isSetWorkload();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof slaveHeartbeat_args)
        return this.equals((slaveHeartbeat_args)that);
      return false;
    }

    public boolean equals(slaveHeartbeat_args that) {
      if (that == null)
        return false;

      boolean this_present_slaveId = true;
      boolean that_present_slaveId = true;
      if (this_present_slaveId || that_present_slaveId) {
        if (!(this_present_slaveId && that_present_slaveId))
          return false;
        if (this.slaveId != that.slaveId)
          return false;
      }

      boolean this_present_workload = true && this.isSetWorkload();
      boolean that_present_workload = true && that.isSetWorkload();
      if (this_present_workload || that_present_workload) {
        if (!(this_present_workload && that_present_workload))
          return false;
        if (!this.workload.equals(that.workload))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(slaveHeartbeat_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSlaveId()).compareTo(other.isSetSlaveId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSlaveId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.slaveId, other.slaveId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetWorkload()).compareTo(other.isSetWorkload());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetWorkload()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.workload, other.workload);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("slaveHeartbeat_args(");
      boolean first = true;

      sb.append("slaveId:");
      sb.append(this.slaveId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("workload:");
      if (this.workload == null) {
        sb.append("null");
      } else {
        sb.append(this.workload);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (workload != null) {
        workload.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class slaveHeartbeat_argsStandardSchemeFactory implements SchemeFactory {
      public slaveHeartbeat_argsStandardScheme getScheme() {
        return new slaveHeartbeat_argsStandardScheme();
      }
    }

    private static class slaveHeartbeat_argsStandardScheme extends StandardScheme<slaveHeartbeat_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, slaveHeartbeat_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // SLAVE_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.slaveId = iprot.readI64();
                struct.setSlaveIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // WORKLOAD
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.workload = new SlaveWorkload();
                struct.workload.read(iprot);
                struct.setWorkloadIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, slaveHeartbeat_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(SLAVE_ID_FIELD_DESC);
        oprot.writeI64(struct.slaveId);
        oprot.writeFieldEnd();
        if (struct.workload != null) {
          oprot.writeFieldBegin(WORKLOAD_FIELD_DESC);
          struct.workload.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class slaveHeartbeat_argsTupleSchemeFactory implements SchemeFactory {
      public slaveHeartbeat_argsTupleScheme getScheme() {
        return new slaveHeartbeat_argsTupleScheme();
      }
    }

    private static class slaveHeartbeat_argsTupleScheme extends TupleScheme<slaveHeartbeat_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, slaveHeartbeat_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSlaveId()) {
          optionals.set(0);
        }
        if (struct.isSetWorkload()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSlaveId()) {
          oprot.writeI64(struct.slaveId);
        }
        if (struct.isSetWorkload()) {
          struct.workload.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, slaveHeartbeat_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.slaveId = iprot.readI64();
          struct.setSlaveIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.workload = new SlaveWorkload();
          struct.workload.read(iprot);
          struct.setWorkloadIsSet(true);
        }
      }
    }

  }

  public static class slaveHeartbeat_result implements org.apache.thrift.TBase<slaveHeartbeat_result, slaveHeartbeat_result._Fields>, java.io.Serializable, Cloneable, Comparable<slaveHeartbeat_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("slaveHeartbeat_result");

    private static final org.apache.thrift.protocol.TField SOE_FIELD_DESC = new org.apache.thrift.protocol.TField("soe", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new slaveHeartbeat_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new slaveHeartbeat_resultTupleSchemeFactory());
    }

    public SlaveOperationException soe; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SOE((short)1, "soe");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // SOE
            return SOE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SOE, new org.apache.thrift.meta_data.FieldMetaData("soe", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(slaveHeartbeat_result.class, metaDataMap);
    }

    public slaveHeartbeat_result() {
    }

    public slaveHeartbeat_result(
      SlaveOperationException soe)
    {
      this();
      this.soe = soe;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public slaveHeartbeat_result(slaveHeartbeat_result other) {
      if (other.isSetSoe()) {
        this.soe = new SlaveOperationException(other.soe);
      }
    }

    public slaveHeartbeat_result deepCopy() {
      return new slaveHeartbeat_result(this);
    }

    @Override
    public void clear() {
      this.soe = null;
    }

    public SlaveOperationException getSoe() {
      return this.soe;
    }

    public slaveHeartbeat_result setSoe(SlaveOperationException soe) {
      this.soe = soe;
      return this;
    }

    public void unsetSoe() {
      this.soe = null;
    }

    /** Returns true if field soe is set (has been assigned a value) and false otherwise */
    public boolean isSetSoe() {
      return this.soe != null;
    }

    public void setSoeIsSet(boolean value) {
      if (!value) {
        this.soe = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SOE:
        if (value == null) {
          unsetSoe();
        } else {
          setSoe((SlaveOperationException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SOE:
        return getSoe();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SOE:
        return isSetSoe();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof slaveHeartbeat_result)
        return this.equals((slaveHeartbeat_result)that);
      return false;
    }

    public boolean equals(slaveHeartbeat_result that) {
      if (that == null)
        return false;

      boolean this_present_soe = true && this.isSetSoe();
      boolean that_present_soe = true && that.isSetSoe();
      if (this_present_soe || that_present_soe) {
        if (!(this_present_soe && that_present_soe))
          return false;
        if (!this.soe.equals(that.soe))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(slaveHeartbeat_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSoe()).compareTo(other.isSetSoe());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSoe()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.soe, other.soe);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("slaveHeartbeat_result(");
      boolean first = true;

      sb.append("soe:");
      if (this.soe == null) {
        sb.append("null");
      } else {
        sb.append(this.soe);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class slaveHeartbeat_resultStandardSchemeFactory implements SchemeFactory {
      public slaveHeartbeat_resultStandardScheme getScheme() {
        return new slaveHeartbeat_resultStandardScheme();
      }
    }

    private static class slaveHeartbeat_resultStandardScheme extends StandardScheme<slaveHeartbeat_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, slaveHeartbeat_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // SOE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.soe = new SlaveOperationException();
                struct.soe.read(iprot);
                struct.setSoeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, slaveHeartbeat_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.soe != null) {
          oprot.writeFieldBegin(SOE_FIELD_DESC);
          struct.soe.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class slaveHeartbeat_resultTupleSchemeFactory implements SchemeFactory {
      public slaveHeartbeat_resultTupleScheme getScheme() {
        return new slaveHeartbeat_resultTupleScheme();
      }
    }

    private static class slaveHeartbeat_resultTupleScheme extends TupleScheme<slaveHeartbeat_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, slaveHeartbeat_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSoe()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSoe()) {
          struct.soe.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, slaveHeartbeat_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.soe = new SlaveOperationException();
          struct.soe.read(iprot);
          struct.setSoeIsSet(true);
        }
      }
    }

  }

  public static class dfsOpen_args implements org.apache.thrift.TBase<dfsOpen_args, dfsOpen_args._Fields>, java.io.Serializable, Cloneable, Comparable<dfsOpen_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("dfsOpen_args");

    private static final org.apache.thrift.protocol.TField NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("name", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField MODE_FIELD_DESC = new org.apache.thrift.protocol.TField("mode", org.apache.thrift.protocol.TType.I16, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new dfsOpen_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new dfsOpen_argsTupleSchemeFactory());
    }

    public String name; // required
    public short mode; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      NAME((short)1, "name"),
      MODE((short)2, "mode");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // NAME
            return NAME;
          case 2: // MODE
            return MODE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __MODE_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.NAME, new org.apache.thrift.meta_data.FieldMetaData("name", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.MODE, new org.apache.thrift.meta_data.FieldMetaData("mode", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I16)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(dfsOpen_args.class, metaDataMap);
    }

    public dfsOpen_args() {
    }

    public dfsOpen_args(
      String name,
      short mode)
    {
      this();
      this.name = name;
      this.mode = mode;
      setModeIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public dfsOpen_args(dfsOpen_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetName()) {
        this.name = other.name;
      }
      this.mode = other.mode;
    }

    public dfsOpen_args deepCopy() {
      return new dfsOpen_args(this);
    }

    @Override
    public void clear() {
      this.name = null;
      setModeIsSet(false);
      this.mode = 0;
    }

    public String getName() {
      return this.name;
    }

    public dfsOpen_args setName(String name) {
      this.name = name;
      return this;
    }

    public void unsetName() {
      this.name = null;
    }

    /** Returns true if field name is set (has been assigned a value) and false otherwise */
    public boolean isSetName() {
      return this.name != null;
    }

    public void setNameIsSet(boolean value) {
      if (!value) {
        this.name = null;
      }
    }

    public short getMode() {
      return this.mode;
    }

    public dfsOpen_args setMode(short mode) {
      this.mode = mode;
      setModeIsSet(true);
      return this;
    }

    public void unsetMode() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __MODE_ISSET_ID);
    }

    /** Returns true if field mode is set (has been assigned a value) and false otherwise */
    public boolean isSetMode() {
      return EncodingUtils.testBit(__isset_bitfield, __MODE_ISSET_ID);
    }

    public void setModeIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __MODE_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case NAME:
        if (value == null) {
          unsetName();
        } else {
          setName((String)value);
        }
        break;

      case MODE:
        if (value == null) {
          unsetMode();
        } else {
          setMode((Short)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case NAME:
        return getName();

      case MODE:
        return Short.valueOf(getMode());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case NAME:
        return isSetName();
      case MODE:
        return isSetMode();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof dfsOpen_args)
        return this.equals((dfsOpen_args)that);
      return false;
    }

    public boolean equals(dfsOpen_args that) {
      if (that == null)
        return false;

      boolean this_present_name = true && this.isSetName();
      boolean that_present_name = true && that.isSetName();
      if (this_present_name || that_present_name) {
        if (!(this_present_name && that_present_name))
          return false;
        if (!this.name.equals(that.name))
          return false;
      }

      boolean this_present_mode = true;
      boolean that_present_mode = true;
      if (this_present_mode || that_present_mode) {
        if (!(this_present_mode && that_present_mode))
          return false;
        if (this.mode != that.mode)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(dfsOpen_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetName()).compareTo(other.isSetName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.name, other.name);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetMode()).compareTo(other.isSetMode());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMode()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.mode, other.mode);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("dfsOpen_args(");
      boolean first = true;

      sb.append("name:");
      if (this.name == null) {
        sb.append("null");
      } else {
        sb.append(this.name);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("mode:");
      sb.append(this.mode);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class dfsOpen_argsStandardSchemeFactory implements SchemeFactory {
      public dfsOpen_argsStandardScheme getScheme() {
        return new dfsOpen_argsStandardScheme();
      }
    }

    private static class dfsOpen_argsStandardScheme extends StandardScheme<dfsOpen_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, dfsOpen_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.name = iprot.readString();
                struct.setNameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // MODE
              if (schemeField.type == org.apache.thrift.protocol.TType.I16) {
                struct.mode = iprot.readI16();
                struct.setModeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, dfsOpen_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.name != null) {
          oprot.writeFieldBegin(NAME_FIELD_DESC);
          oprot.writeString(struct.name);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(MODE_FIELD_DESC);
        oprot.writeI16(struct.mode);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class dfsOpen_argsTupleSchemeFactory implements SchemeFactory {
      public dfsOpen_argsTupleScheme getScheme() {
        return new dfsOpen_argsTupleScheme();
      }
    }

    private static class dfsOpen_argsTupleScheme extends TupleScheme<dfsOpen_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, dfsOpen_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetName()) {
          optionals.set(0);
        }
        if (struct.isSetMode()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetName()) {
          oprot.writeString(struct.name);
        }
        if (struct.isSetMode()) {
          oprot.writeI16(struct.mode);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, dfsOpen_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.name = iprot.readString();
          struct.setNameIsSet(true);
        }
        if (incoming.get(1)) {
          struct.mode = iprot.readI16();
          struct.setModeIsSet(true);
        }
      }
    }

  }

  public static class dfsOpen_result implements org.apache.thrift.TBase<dfsOpen_result, dfsOpen_result._Fields>, java.io.Serializable, Cloneable, Comparable<dfsOpen_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("dfsOpen_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField FNE_FIELD_DESC = new org.apache.thrift.protocol.TField("fne", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField UNE_FIELD_DESC = new org.apache.thrift.protocol.TField("une", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new dfsOpen_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new dfsOpen_resultTupleSchemeFactory());
    }

    public ClientFile success; // required
    public FileNotExistException fne; // required
    public UnknownException une; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      FNE((short)1, "fne"),
      UNE((short)2, "une");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // FNE
            return FNE;
          case 2: // UNE
            return UNE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ClientFile.class)));
      tmpMap.put(_Fields.FNE, new org.apache.thrift.meta_data.FieldMetaData("fne", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.UNE, new org.apache.thrift.meta_data.FieldMetaData("une", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(dfsOpen_result.class, metaDataMap);
    }

    public dfsOpen_result() {
    }

    public dfsOpen_result(
      ClientFile success,
      FileNotExistException fne,
      UnknownException une)
    {
      this();
      this.success = success;
      this.fne = fne;
      this.une = une;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public dfsOpen_result(dfsOpen_result other) {
      if (other.isSetSuccess()) {
        this.success = new ClientFile(other.success);
      }
      if (other.isSetFne()) {
        this.fne = new FileNotExistException(other.fne);
      }
      if (other.isSetUne()) {
        this.une = new UnknownException(other.une);
      }
    }

    public dfsOpen_result deepCopy() {
      return new dfsOpen_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.fne = null;
      this.une = null;
    }

    public ClientFile getSuccess() {
      return this.success;
    }

    public dfsOpen_result setSuccess(ClientFile success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public FileNotExistException getFne() {
      return this.fne;
    }

    public dfsOpen_result setFne(FileNotExistException fne) {
      this.fne = fne;
      return this;
    }

    public void unsetFne() {
      this.fne = null;
    }

    /** Returns true if field fne is set (has been assigned a value) and false otherwise */
    public boolean isSetFne() {
      return this.fne != null;
    }

    public void setFneIsSet(boolean value) {
      if (!value) {
        this.fne = null;
      }
    }

    public UnknownException getUne() {
      return this.une;
    }

    public dfsOpen_result setUne(UnknownException une) {
      this.une = une;
      return this;
    }

    public void unsetUne() {
      this.une = null;
    }

    /** Returns true if field une is set (has been assigned a value) and false otherwise */
    public boolean isSetUne() {
      return this.une != null;
    }

    public void setUneIsSet(boolean value) {
      if (!value) {
        this.une = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((ClientFile)value);
        }
        break;

      case FNE:
        if (value == null) {
          unsetFne();
        } else {
          setFne((FileNotExistException)value);
        }
        break;

      case UNE:
        if (value == null) {
          unsetUne();
        } else {
          setUne((UnknownException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case FNE:
        return getFne();

      case UNE:
        return getUne();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case FNE:
        return isSetFne();
      case UNE:
        return isSetUne();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof dfsOpen_result)
        return this.equals((dfsOpen_result)that);
      return false;
    }

    public boolean equals(dfsOpen_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_fne = true && this.isSetFne();
      boolean that_present_fne = true && that.isSetFne();
      if (this_present_fne || that_present_fne) {
        if (!(this_present_fne && that_present_fne))
          return false;
        if (!this.fne.equals(that.fne))
          return false;
      }

      boolean this_present_une = true && this.isSetUne();
      boolean that_present_une = true && that.isSetUne();
      if (this_present_une || that_present_une) {
        if (!(this_present_une && that_present_une))
          return false;
        if (!this.une.equals(that.une))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(dfsOpen_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetFne()).compareTo(other.isSetFne());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetFne()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fne, other.fne);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetUne()).compareTo(other.isSetUne());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUne()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.une, other.une);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("dfsOpen_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("fne:");
      if (this.fne == null) {
        sb.append("null");
      } else {
        sb.append(this.fne);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("une:");
      if (this.une == null) {
        sb.append("null");
      } else {
        sb.append(this.une);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class dfsOpen_resultStandardSchemeFactory implements SchemeFactory {
      public dfsOpen_resultStandardScheme getScheme() {
        return new dfsOpen_resultStandardScheme();
      }
    }

    private static class dfsOpen_resultStandardScheme extends StandardScheme<dfsOpen_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, dfsOpen_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new ClientFile();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // FNE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.fne = new FileNotExistException();
                struct.fne.read(iprot);
                struct.setFneIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // UNE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.une = new UnknownException();
                struct.une.read(iprot);
                struct.setUneIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, dfsOpen_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.fne != null) {
          oprot.writeFieldBegin(FNE_FIELD_DESC);
          struct.fne.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.une != null) {
          oprot.writeFieldBegin(UNE_FIELD_DESC);
          struct.une.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class dfsOpen_resultTupleSchemeFactory implements SchemeFactory {
      public dfsOpen_resultTupleScheme getScheme() {
        return new dfsOpen_resultTupleScheme();
      }
    }

    private static class dfsOpen_resultTupleScheme extends TupleScheme<dfsOpen_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, dfsOpen_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetFne()) {
          optionals.set(1);
        }
        if (struct.isSetUne()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetFne()) {
          struct.fne.write(oprot);
        }
        if (struct.isSetUne()) {
          struct.une.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, dfsOpen_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.success = new ClientFile();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.fne = new FileNotExistException();
          struct.fne.read(iprot);
          struct.setFneIsSet(true);
        }
        if (incoming.get(2)) {
          struct.une = new UnknownException();
          struct.une.read(iprot);
          struct.setUneIsSet(true);
        }
      }
    }

  }

  public static class dfsCreateChunk_args implements org.apache.thrift.TBase<dfsCreateChunk_args, dfsCreateChunk_args._Fields>, java.io.Serializable, Cloneable, Comparable<dfsCreateChunk_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("dfsCreateChunk_args");

    private static final org.apache.thrift.protocol.TField FILE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("fileId", org.apache.thrift.protocol.TType.I64, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new dfsCreateChunk_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new dfsCreateChunk_argsTupleSchemeFactory());
    }

    public long fileId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      FILE_ID((short)1, "fileId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // FILE_ID
            return FILE_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __FILEID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.FILE_ID, new org.apache.thrift.meta_data.FieldMetaData("fileId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(dfsCreateChunk_args.class, metaDataMap);
    }

    public dfsCreateChunk_args() {
    }

    public dfsCreateChunk_args(
      long fileId)
    {
      this();
      this.fileId = fileId;
      setFileIdIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public dfsCreateChunk_args(dfsCreateChunk_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.fileId = other.fileId;
    }

    public dfsCreateChunk_args deepCopy() {
      return new dfsCreateChunk_args(this);
    }

    @Override
    public void clear() {
      setFileIdIsSet(false);
      this.fileId = 0;
    }

    public long getFileId() {
      return this.fileId;
    }

    public dfsCreateChunk_args setFileId(long fileId) {
      this.fileId = fileId;
      setFileIdIsSet(true);
      return this;
    }

    public void unsetFileId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __FILEID_ISSET_ID);
    }

    /** Returns true if field fileId is set (has been assigned a value) and false otherwise */
    public boolean isSetFileId() {
      return EncodingUtils.testBit(__isset_bitfield, __FILEID_ISSET_ID);
    }

    public void setFileIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __FILEID_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case FILE_ID:
        if (value == null) {
          unsetFileId();
        } else {
          setFileId((Long)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case FILE_ID:
        return Long.valueOf(getFileId());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case FILE_ID:
        return isSetFileId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof dfsCreateChunk_args)
        return this.equals((dfsCreateChunk_args)that);
      return false;
    }

    public boolean equals(dfsCreateChunk_args that) {
      if (that == null)
        return false;

      boolean this_present_fileId = true;
      boolean that_present_fileId = true;
      if (this_present_fileId || that_present_fileId) {
        if (!(this_present_fileId && that_present_fileId))
          return false;
        if (this.fileId != that.fileId)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(dfsCreateChunk_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetFileId()).compareTo(other.isSetFileId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetFileId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fileId, other.fileId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("dfsCreateChunk_args(");
      boolean first = true;

      sb.append("fileId:");
      sb.append(this.fileId);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class dfsCreateChunk_argsStandardSchemeFactory implements SchemeFactory {
      public dfsCreateChunk_argsStandardScheme getScheme() {
        return new dfsCreateChunk_argsStandardScheme();
      }
    }

    private static class dfsCreateChunk_argsStandardScheme extends StandardScheme<dfsCreateChunk_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, dfsCreateChunk_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // FILE_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.fileId = iprot.readI64();
                struct.setFileIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, dfsCreateChunk_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(FILE_ID_FIELD_DESC);
        oprot.writeI64(struct.fileId);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class dfsCreateChunk_argsTupleSchemeFactory implements SchemeFactory {
      public dfsCreateChunk_argsTupleScheme getScheme() {
        return new dfsCreateChunk_argsTupleScheme();
      }
    }

    private static class dfsCreateChunk_argsTupleScheme extends TupleScheme<dfsCreateChunk_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, dfsCreateChunk_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetFileId()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetFileId()) {
          oprot.writeI64(struct.fileId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, dfsCreateChunk_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.fileId = iprot.readI64();
          struct.setFileIdIsSet(true);
        }
      }
    }

  }

  public static class dfsCreateChunk_result implements org.apache.thrift.TBase<dfsCreateChunk_result, dfsCreateChunk_result._Fields>, java.io.Serializable, Cloneable, Comparable<dfsCreateChunk_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("dfsCreateChunk_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField FNE_FIELD_DESC = new org.apache.thrift.protocol.TField("fne", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField UNE_FIELD_DESC = new org.apache.thrift.protocol.TField("une", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new dfsCreateChunk_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new dfsCreateChunk_resultTupleSchemeFactory());
    }

    public ClientChunk success; // required
    public FileNotExistException fne; // required
    public UnknownException une; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      FNE((short)1, "fne"),
      UNE((short)2, "une");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // FNE
            return FNE;
          case 2: // UNE
            return UNE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ClientChunk.class)));
      tmpMap.put(_Fields.FNE, new org.apache.thrift.meta_data.FieldMetaData("fne", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.UNE, new org.apache.thrift.meta_data.FieldMetaData("une", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(dfsCreateChunk_result.class, metaDataMap);
    }

    public dfsCreateChunk_result() {
    }

    public dfsCreateChunk_result(
      ClientChunk success,
      FileNotExistException fne,
      UnknownException une)
    {
      this();
      this.success = success;
      this.fne = fne;
      this.une = une;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public dfsCreateChunk_result(dfsCreateChunk_result other) {
      if (other.isSetSuccess()) {
        this.success = new ClientChunk(other.success);
      }
      if (other.isSetFne()) {
        this.fne = new FileNotExistException(other.fne);
      }
      if (other.isSetUne()) {
        this.une = new UnknownException(other.une);
      }
    }

    public dfsCreateChunk_result deepCopy() {
      return new dfsCreateChunk_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.fne = null;
      this.une = null;
    }

    public ClientChunk getSuccess() {
      return this.success;
    }

    public dfsCreateChunk_result setSuccess(ClientChunk success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public FileNotExistException getFne() {
      return this.fne;
    }

    public dfsCreateChunk_result setFne(FileNotExistException fne) {
      this.fne = fne;
      return this;
    }

    public void unsetFne() {
      this.fne = null;
    }

    /** Returns true if field fne is set (has been assigned a value) and false otherwise */
    public boolean isSetFne() {
      return this.fne != null;
    }

    public void setFneIsSet(boolean value) {
      if (!value) {
        this.fne = null;
      }
    }

    public UnknownException getUne() {
      return this.une;
    }

    public dfsCreateChunk_result setUne(UnknownException une) {
      this.une = une;
      return this;
    }

    public void unsetUne() {
      this.une = null;
    }

    /** Returns true if field une is set (has been assigned a value) and false otherwise */
    public boolean isSetUne() {
      return this.une != null;
    }

    public void setUneIsSet(boolean value) {
      if (!value) {
        this.une = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((ClientChunk)value);
        }
        break;

      case FNE:
        if (value == null) {
          unsetFne();
        } else {
          setFne((FileNotExistException)value);
        }
        break;

      case UNE:
        if (value == null) {
          unsetUne();
        } else {
          setUne((UnknownException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case FNE:
        return getFne();

      case UNE:
        return getUne();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case FNE:
        return isSetFne();
      case UNE:
        return isSetUne();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof dfsCreateChunk_result)
        return this.equals((dfsCreateChunk_result)that);
      return false;
    }

    public boolean equals(dfsCreateChunk_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_fne = true && this.isSetFne();
      boolean that_present_fne = true && that.isSetFne();
      if (this_present_fne || that_present_fne) {
        if (!(this_present_fne && that_present_fne))
          return false;
        if (!this.fne.equals(that.fne))
          return false;
      }

      boolean this_present_une = true && this.isSetUne();
      boolean that_present_une = true && that.isSetUne();
      if (this_present_une || that_present_une) {
        if (!(this_present_une && that_present_une))
          return false;
        if (!this.une.equals(that.une))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(dfsCreateChunk_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetFne()).compareTo(other.isSetFne());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetFne()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fne, other.fne);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetUne()).compareTo(other.isSetUne());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUne()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.une, other.une);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("dfsCreateChunk_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("fne:");
      if (this.fne == null) {
        sb.append("null");
      } else {
        sb.append(this.fne);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("une:");
      if (this.une == null) {
        sb.append("null");
      } else {
        sb.append(this.une);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class dfsCreateChunk_resultStandardSchemeFactory implements SchemeFactory {
      public dfsCreateChunk_resultStandardScheme getScheme() {
        return new dfsCreateChunk_resultStandardScheme();
      }
    }

    private static class dfsCreateChunk_resultStandardScheme extends StandardScheme<dfsCreateChunk_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, dfsCreateChunk_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new ClientChunk();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // FNE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.fne = new FileNotExistException();
                struct.fne.read(iprot);
                struct.setFneIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // UNE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.une = new UnknownException();
                struct.une.read(iprot);
                struct.setUneIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, dfsCreateChunk_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.fne != null) {
          oprot.writeFieldBegin(FNE_FIELD_DESC);
          struct.fne.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.une != null) {
          oprot.writeFieldBegin(UNE_FIELD_DESC);
          struct.une.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class dfsCreateChunk_resultTupleSchemeFactory implements SchemeFactory {
      public dfsCreateChunk_resultTupleScheme getScheme() {
        return new dfsCreateChunk_resultTupleScheme();
      }
    }

    private static class dfsCreateChunk_resultTupleScheme extends TupleScheme<dfsCreateChunk_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, dfsCreateChunk_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetFne()) {
          optionals.set(1);
        }
        if (struct.isSetUne()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetFne()) {
          struct.fne.write(oprot);
        }
        if (struct.isSetUne()) {
          struct.une.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, dfsCreateChunk_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.success = new ClientChunk();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.fne = new FileNotExistException();
          struct.fne.read(iprot);
          struct.setFneIsSet(true);
        }
        if (incoming.get(2)) {
          struct.une = new UnknownException();
          struct.une.read(iprot);
          struct.setUneIsSet(true);
        }
      }
    }

  }

  public static class dfsClose_args implements org.apache.thrift.TBase<dfsClose_args, dfsClose_args._Fields>, java.io.Serializable, Cloneable, Comparable<dfsClose_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("dfsClose_args");

    private static final org.apache.thrift.protocol.TField FILE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("fileId", org.apache.thrift.protocol.TType.I64, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new dfsClose_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new dfsClose_argsTupleSchemeFactory());
    }

    public long fileId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      FILE_ID((short)1, "fileId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // FILE_ID
            return FILE_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __FILEID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.FILE_ID, new org.apache.thrift.meta_data.FieldMetaData("fileId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(dfsClose_args.class, metaDataMap);
    }

    public dfsClose_args() {
    }

    public dfsClose_args(
      long fileId)
    {
      this();
      this.fileId = fileId;
      setFileIdIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public dfsClose_args(dfsClose_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.fileId = other.fileId;
    }

    public dfsClose_args deepCopy() {
      return new dfsClose_args(this);
    }

    @Override
    public void clear() {
      setFileIdIsSet(false);
      this.fileId = 0;
    }

    public long getFileId() {
      return this.fileId;
    }

    public dfsClose_args setFileId(long fileId) {
      this.fileId = fileId;
      setFileIdIsSet(true);
      return this;
    }

    public void unsetFileId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __FILEID_ISSET_ID);
    }

    /** Returns true if field fileId is set (has been assigned a value) and false otherwise */
    public boolean isSetFileId() {
      return EncodingUtils.testBit(__isset_bitfield, __FILEID_ISSET_ID);
    }

    public void setFileIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __FILEID_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case FILE_ID:
        if (value == null) {
          unsetFileId();
        } else {
          setFileId((Long)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case FILE_ID:
        return Long.valueOf(getFileId());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case FILE_ID:
        return isSetFileId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof dfsClose_args)
        return this.equals((dfsClose_args)that);
      return false;
    }

    public boolean equals(dfsClose_args that) {
      if (that == null)
        return false;

      boolean this_present_fileId = true;
      boolean that_present_fileId = true;
      if (this_present_fileId || that_present_fileId) {
        if (!(this_present_fileId && that_present_fileId))
          return false;
        if (this.fileId != that.fileId)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(dfsClose_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetFileId()).compareTo(other.isSetFileId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetFileId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fileId, other.fileId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("dfsClose_args(");
      boolean first = true;

      sb.append("fileId:");
      sb.append(this.fileId);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class dfsClose_argsStandardSchemeFactory implements SchemeFactory {
      public dfsClose_argsStandardScheme getScheme() {
        return new dfsClose_argsStandardScheme();
      }
    }

    private static class dfsClose_argsStandardScheme extends StandardScheme<dfsClose_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, dfsClose_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // FILE_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.fileId = iprot.readI64();
                struct.setFileIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, dfsClose_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(FILE_ID_FIELD_DESC);
        oprot.writeI64(struct.fileId);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class dfsClose_argsTupleSchemeFactory implements SchemeFactory {
      public dfsClose_argsTupleScheme getScheme() {
        return new dfsClose_argsTupleScheme();
      }
    }

    private static class dfsClose_argsTupleScheme extends TupleScheme<dfsClose_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, dfsClose_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetFileId()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetFileId()) {
          oprot.writeI64(struct.fileId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, dfsClose_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.fileId = iprot.readI64();
          struct.setFileIdIsSet(true);
        }
      }
    }

  }

  public static class dfsClose_result implements org.apache.thrift.TBase<dfsClose_result, dfsClose_result._Fields>, java.io.Serializable, Cloneable, Comparable<dfsClose_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("dfsClose_result");

    private static final org.apache.thrift.protocol.TField FNE_FIELD_DESC = new org.apache.thrift.protocol.TField("fne", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField UNE_FIELD_DESC = new org.apache.thrift.protocol.TField("une", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new dfsClose_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new dfsClose_resultTupleSchemeFactory());
    }

    public FileNotExistException fne; // required
    public UnknownException une; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      FNE((short)1, "fne"),
      UNE((short)2, "une");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // FNE
            return FNE;
          case 2: // UNE
            return UNE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.FNE, new org.apache.thrift.meta_data.FieldMetaData("fne", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.UNE, new org.apache.thrift.meta_data.FieldMetaData("une", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(dfsClose_result.class, metaDataMap);
    }

    public dfsClose_result() {
    }

    public dfsClose_result(
      FileNotExistException fne,
      UnknownException une)
    {
      this();
      this.fne = fne;
      this.une = une;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public dfsClose_result(dfsClose_result other) {
      if (other.isSetFne()) {
        this.fne = new FileNotExistException(other.fne);
      }
      if (other.isSetUne()) {
        this.une = new UnknownException(other.une);
      }
    }

    public dfsClose_result deepCopy() {
      return new dfsClose_result(this);
    }

    @Override
    public void clear() {
      this.fne = null;
      this.une = null;
    }

    public FileNotExistException getFne() {
      return this.fne;
    }

    public dfsClose_result setFne(FileNotExistException fne) {
      this.fne = fne;
      return this;
    }

    public void unsetFne() {
      this.fne = null;
    }

    /** Returns true if field fne is set (has been assigned a value) and false otherwise */
    public boolean isSetFne() {
      return this.fne != null;
    }

    public void setFneIsSet(boolean value) {
      if (!value) {
        this.fne = null;
      }
    }

    public UnknownException getUne() {
      return this.une;
    }

    public dfsClose_result setUne(UnknownException une) {
      this.une = une;
      return this;
    }

    public void unsetUne() {
      this.une = null;
    }

    /** Returns true if field une is set (has been assigned a value) and false otherwise */
    public boolean isSetUne() {
      return this.une != null;
    }

    public void setUneIsSet(boolean value) {
      if (!value) {
        this.une = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case FNE:
        if (value == null) {
          unsetFne();
        } else {
          setFne((FileNotExistException)value);
        }
        break;

      case UNE:
        if (value == null) {
          unsetUne();
        } else {
          setUne((UnknownException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case FNE:
        return getFne();

      case UNE:
        return getUne();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case FNE:
        return isSetFne();
      case UNE:
        return isSetUne();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof dfsClose_result)
        return this.equals((dfsClose_result)that);
      return false;
    }

    public boolean equals(dfsClose_result that) {
      if (that == null)
        return false;

      boolean this_present_fne = true && this.isSetFne();
      boolean that_present_fne = true && that.isSetFne();
      if (this_present_fne || that_present_fne) {
        if (!(this_present_fne && that_present_fne))
          return false;
        if (!this.fne.equals(that.fne))
          return false;
      }

      boolean this_present_une = true && this.isSetUne();
      boolean that_present_une = true && that.isSetUne();
      if (this_present_une || that_present_une) {
        if (!(this_present_une && that_present_une))
          return false;
        if (!this.une.equals(that.une))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(dfsClose_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetFne()).compareTo(other.isSetFne());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetFne()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fne, other.fne);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetUne()).compareTo(other.isSetUne());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUne()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.une, other.une);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("dfsClose_result(");
      boolean first = true;

      sb.append("fne:");
      if (this.fne == null) {
        sb.append("null");
      } else {
        sb.append(this.fne);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("une:");
      if (this.une == null) {
        sb.append("null");
      } else {
        sb.append(this.une);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class dfsClose_resultStandardSchemeFactory implements SchemeFactory {
      public dfsClose_resultStandardScheme getScheme() {
        return new dfsClose_resultStandardScheme();
      }
    }

    private static class dfsClose_resultStandardScheme extends StandardScheme<dfsClose_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, dfsClose_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // FNE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.fne = new FileNotExistException();
                struct.fne.read(iprot);
                struct.setFneIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // UNE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.une = new UnknownException();
                struct.une.read(iprot);
                struct.setUneIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, dfsClose_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.fne != null) {
          oprot.writeFieldBegin(FNE_FIELD_DESC);
          struct.fne.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.une != null) {
          oprot.writeFieldBegin(UNE_FIELD_DESC);
          struct.une.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class dfsClose_resultTupleSchemeFactory implements SchemeFactory {
      public dfsClose_resultTupleScheme getScheme() {
        return new dfsClose_resultTupleScheme();
      }
    }

    private static class dfsClose_resultTupleScheme extends TupleScheme<dfsClose_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, dfsClose_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetFne()) {
          optionals.set(0);
        }
        if (struct.isSetUne()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetFne()) {
          struct.fne.write(oprot);
        }
        if (struct.isSetUne()) {
          struct.une.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, dfsClose_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.fne = new FileNotExistException();
          struct.fne.read(iprot);
          struct.setFneIsSet(true);
        }
        if (incoming.get(1)) {
          struct.une = new UnknownException();
          struct.une.read(iprot);
          struct.setUneIsSet(true);
        }
      }
    }

  }

  public static class dfsGetFile_args implements org.apache.thrift.TBase<dfsGetFile_args, dfsGetFile_args._Fields>, java.io.Serializable, Cloneable, Comparable<dfsGetFile_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("dfsGetFile_args");

    private static final org.apache.thrift.protocol.TField NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("name", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new dfsGetFile_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new dfsGetFile_argsTupleSchemeFactory());
    }

    public String name; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      NAME((short)1, "name");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // NAME
            return NAME;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.NAME, new org.apache.thrift.meta_data.FieldMetaData("name", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(dfsGetFile_args.class, metaDataMap);
    }

    public dfsGetFile_args() {
    }

    public dfsGetFile_args(
      String name)
    {
      this();
      this.name = name;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public dfsGetFile_args(dfsGetFile_args other) {
      if (other.isSetName()) {
        this.name = other.name;
      }
    }

    public dfsGetFile_args deepCopy() {
      return new dfsGetFile_args(this);
    }

    @Override
    public void clear() {
      this.name = null;
    }

    public String getName() {
      return this.name;
    }

    public dfsGetFile_args setName(String name) {
      this.name = name;
      return this;
    }

    public void unsetName() {
      this.name = null;
    }

    /** Returns true if field name is set (has been assigned a value) and false otherwise */
    public boolean isSetName() {
      return this.name != null;
    }

    public void setNameIsSet(boolean value) {
      if (!value) {
        this.name = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case NAME:
        if (value == null) {
          unsetName();
        } else {
          setName((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case NAME:
        return getName();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case NAME:
        return isSetName();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof dfsGetFile_args)
        return this.equals((dfsGetFile_args)that);
      return false;
    }

    public boolean equals(dfsGetFile_args that) {
      if (that == null)
        return false;

      boolean this_present_name = true && this.isSetName();
      boolean that_present_name = true && that.isSetName();
      if (this_present_name || that_present_name) {
        if (!(this_present_name && that_present_name))
          return false;
        if (!this.name.equals(that.name))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(dfsGetFile_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetName()).compareTo(other.isSetName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.name, other.name);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("dfsGetFile_args(");
      boolean first = true;

      sb.append("name:");
      if (this.name == null) {
        sb.append("null");
      } else {
        sb.append(this.name);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class dfsGetFile_argsStandardSchemeFactory implements SchemeFactory {
      public dfsGetFile_argsStandardScheme getScheme() {
        return new dfsGetFile_argsStandardScheme();
      }
    }

    private static class dfsGetFile_argsStandardScheme extends StandardScheme<dfsGetFile_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, dfsGetFile_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.name = iprot.readString();
                struct.setNameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, dfsGetFile_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.name != null) {
          oprot.writeFieldBegin(NAME_FIELD_DESC);
          oprot.writeString(struct.name);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class dfsGetFile_argsTupleSchemeFactory implements SchemeFactory {
      public dfsGetFile_argsTupleScheme getScheme() {
        return new dfsGetFile_argsTupleScheme();
      }
    }

    private static class dfsGetFile_argsTupleScheme extends TupleScheme<dfsGetFile_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, dfsGetFile_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetName()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetName()) {
          oprot.writeString(struct.name);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, dfsGetFile_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.name = iprot.readString();
          struct.setNameIsSet(true);
        }
      }
    }

  }

  public static class dfsGetFile_result implements org.apache.thrift.TBase<dfsGetFile_result, dfsGetFile_result._Fields>, java.io.Serializable, Cloneable, Comparable<dfsGetFile_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("dfsGetFile_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField FNE_FIELD_DESC = new org.apache.thrift.protocol.TField("fne", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField UNE_FIELD_DESC = new org.apache.thrift.protocol.TField("une", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new dfsGetFile_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new dfsGetFile_resultTupleSchemeFactory());
    }

    public ClientFile success; // required
    public FileNotExistException fne; // required
    public UnknownException une; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      FNE((short)1, "fne"),
      UNE((short)2, "une");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // FNE
            return FNE;
          case 2: // UNE
            return UNE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ClientFile.class)));
      tmpMap.put(_Fields.FNE, new org.apache.thrift.meta_data.FieldMetaData("fne", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.UNE, new org.apache.thrift.meta_data.FieldMetaData("une", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(dfsGetFile_result.class, metaDataMap);
    }

    public dfsGetFile_result() {
    }

    public dfsGetFile_result(
      ClientFile success,
      FileNotExistException fne,
      UnknownException une)
    {
      this();
      this.success = success;
      this.fne = fne;
      this.une = une;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public dfsGetFile_result(dfsGetFile_result other) {
      if (other.isSetSuccess()) {
        this.success = new ClientFile(other.success);
      }
      if (other.isSetFne()) {
        this.fne = new FileNotExistException(other.fne);
      }
      if (other.isSetUne()) {
        this.une = new UnknownException(other.une);
      }
    }

    public dfsGetFile_result deepCopy() {
      return new dfsGetFile_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.fne = null;
      this.une = null;
    }

    public ClientFile getSuccess() {
      return this.success;
    }

    public dfsGetFile_result setSuccess(ClientFile success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public FileNotExistException getFne() {
      return this.fne;
    }

    public dfsGetFile_result setFne(FileNotExistException fne) {
      this.fne = fne;
      return this;
    }

    public void unsetFne() {
      this.fne = null;
    }

    /** Returns true if field fne is set (has been assigned a value) and false otherwise */
    public boolean isSetFne() {
      return this.fne != null;
    }

    public void setFneIsSet(boolean value) {
      if (!value) {
        this.fne = null;
      }
    }

    public UnknownException getUne() {
      return this.une;
    }

    public dfsGetFile_result setUne(UnknownException une) {
      this.une = une;
      return this;
    }

    public void unsetUne() {
      this.une = null;
    }

    /** Returns true if field une is set (has been assigned a value) and false otherwise */
    public boolean isSetUne() {
      return this.une != null;
    }

    public void setUneIsSet(boolean value) {
      if (!value) {
        this.une = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((ClientFile)value);
        }
        break;

      case FNE:
        if (value == null) {
          unsetFne();
        } else {
          setFne((FileNotExistException)value);
        }
        break;

      case UNE:
        if (value == null) {
          unsetUne();
        } else {
          setUne((UnknownException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case FNE:
        return getFne();

      case UNE:
        return getUne();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case FNE:
        return isSetFne();
      case UNE:
        return isSetUne();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof dfsGetFile_result)
        return this.equals((dfsGetFile_result)that);
      return false;
    }

    public boolean equals(dfsGetFile_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_fne = true && this.isSetFne();
      boolean that_present_fne = true && that.isSetFne();
      if (this_present_fne || that_present_fne) {
        if (!(this_present_fne && that_present_fne))
          return false;
        if (!this.fne.equals(that.fne))
          return false;
      }

      boolean this_present_une = true && this.isSetUne();
      boolean that_present_une = true && that.isSetUne();
      if (this_present_une || that_present_une) {
        if (!(this_present_une && that_present_une))
          return false;
        if (!this.une.equals(that.une))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(dfsGetFile_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetFne()).compareTo(other.isSetFne());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetFne()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fne, other.fne);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetUne()).compareTo(other.isSetUne());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUne()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.une, other.une);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("dfsGetFile_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("fne:");
      if (this.fne == null) {
        sb.append("null");
      } else {
        sb.append(this.fne);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("une:");
      if (this.une == null) {
        sb.append("null");
      } else {
        sb.append(this.une);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class dfsGetFile_resultStandardSchemeFactory implements SchemeFactory {
      public dfsGetFile_resultStandardScheme getScheme() {
        return new dfsGetFile_resultStandardScheme();
      }
    }

    private static class dfsGetFile_resultStandardScheme extends StandardScheme<dfsGetFile_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, dfsGetFile_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new ClientFile();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // FNE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.fne = new FileNotExistException();
                struct.fne.read(iprot);
                struct.setFneIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // UNE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.une = new UnknownException();
                struct.une.read(iprot);
                struct.setUneIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, dfsGetFile_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.fne != null) {
          oprot.writeFieldBegin(FNE_FIELD_DESC);
          struct.fne.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.une != null) {
          oprot.writeFieldBegin(UNE_FIELD_DESC);
          struct.une.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class dfsGetFile_resultTupleSchemeFactory implements SchemeFactory {
      public dfsGetFile_resultTupleScheme getScheme() {
        return new dfsGetFile_resultTupleScheme();
      }
    }

    private static class dfsGetFile_resultTupleScheme extends TupleScheme<dfsGetFile_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, dfsGetFile_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetFne()) {
          optionals.set(1);
        }
        if (struct.isSetUne()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetFne()) {
          struct.fne.write(oprot);
        }
        if (struct.isSetUne()) {
          struct.une.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, dfsGetFile_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.success = new ClientFile();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.fne = new FileNotExistException();
          struct.fne.read(iprot);
          struct.setFneIsSet(true);
        }
        if (incoming.get(2)) {
          struct.une = new UnknownException();
          struct.une.read(iprot);
          struct.setUneIsSet(true);
        }
      }
    }

  }

  public static class dfsGetChunk_args implements org.apache.thrift.TBase<dfsGetChunk_args, dfsGetChunk_args._Fields>, java.io.Serializable, Cloneable, Comparable<dfsGetChunk_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("dfsGetChunk_args");

    private static final org.apache.thrift.protocol.TField FILE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("fileId", org.apache.thrift.protocol.TType.I64, (short)1);
    private static final org.apache.thrift.protocol.TField INDEX_FIELD_DESC = new org.apache.thrift.protocol.TField("index", org.apache.thrift.protocol.TType.I64, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new dfsGetChunk_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new dfsGetChunk_argsTupleSchemeFactory());
    }

    public long fileId; // required
    public long index; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      FILE_ID((short)1, "fileId"),
      INDEX((short)2, "index");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // FILE_ID
            return FILE_ID;
          case 2: // INDEX
            return INDEX;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __FILEID_ISSET_ID = 0;
    private static final int __INDEX_ISSET_ID = 1;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.FILE_ID, new org.apache.thrift.meta_data.FieldMetaData("fileId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.INDEX, new org.apache.thrift.meta_data.FieldMetaData("index", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(dfsGetChunk_args.class, metaDataMap);
    }

    public dfsGetChunk_args() {
    }

    public dfsGetChunk_args(
      long fileId,
      long index)
    {
      this();
      this.fileId = fileId;
      setFileIdIsSet(true);
      this.index = index;
      setIndexIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public dfsGetChunk_args(dfsGetChunk_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.fileId = other.fileId;
      this.index = other.index;
    }

    public dfsGetChunk_args deepCopy() {
      return new dfsGetChunk_args(this);
    }

    @Override
    public void clear() {
      setFileIdIsSet(false);
      this.fileId = 0;
      setIndexIsSet(false);
      this.index = 0;
    }

    public long getFileId() {
      return this.fileId;
    }

    public dfsGetChunk_args setFileId(long fileId) {
      this.fileId = fileId;
      setFileIdIsSet(true);
      return this;
    }

    public void unsetFileId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __FILEID_ISSET_ID);
    }

    /** Returns true if field fileId is set (has been assigned a value) and false otherwise */
    public boolean isSetFileId() {
      return EncodingUtils.testBit(__isset_bitfield, __FILEID_ISSET_ID);
    }

    public void setFileIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __FILEID_ISSET_ID, value);
    }

    public long getIndex() {
      return this.index;
    }

    public dfsGetChunk_args setIndex(long index) {
      this.index = index;
      setIndexIsSet(true);
      return this;
    }

    public void unsetIndex() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __INDEX_ISSET_ID);
    }

    /** Returns true if field index is set (has been assigned a value) and false otherwise */
    public boolean isSetIndex() {
      return EncodingUtils.testBit(__isset_bitfield, __INDEX_ISSET_ID);
    }

    public void setIndexIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __INDEX_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case FILE_ID:
        if (value == null) {
          unsetFileId();
        } else {
          setFileId((Long)value);
        }
        break;

      case INDEX:
        if (value == null) {
          unsetIndex();
        } else {
          setIndex((Long)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case FILE_ID:
        return Long.valueOf(getFileId());

      case INDEX:
        return Long.valueOf(getIndex());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case FILE_ID:
        return isSetFileId();
      case INDEX:
        return isSetIndex();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof dfsGetChunk_args)
        return this.equals((dfsGetChunk_args)that);
      return false;
    }

    public boolean equals(dfsGetChunk_args that) {
      if (that == null)
        return false;

      boolean this_present_fileId = true;
      boolean that_present_fileId = true;
      if (this_present_fileId || that_present_fileId) {
        if (!(this_present_fileId && that_present_fileId))
          return false;
        if (this.fileId != that.fileId)
          return false;
      }

      boolean this_present_index = true;
      boolean that_present_index = true;
      if (this_present_index || that_present_index) {
        if (!(this_present_index && that_present_index))
          return false;
        if (this.index != that.index)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(dfsGetChunk_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetFileId()).compareTo(other.isSetFileId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetFileId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fileId, other.fileId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetIndex()).compareTo(other.isSetIndex());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetIndex()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.index, other.index);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("dfsGetChunk_args(");
      boolean first = true;

      sb.append("fileId:");
      sb.append(this.fileId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("index:");
      sb.append(this.index);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class dfsGetChunk_argsStandardSchemeFactory implements SchemeFactory {
      public dfsGetChunk_argsStandardScheme getScheme() {
        return new dfsGetChunk_argsStandardScheme();
      }
    }

    private static class dfsGetChunk_argsStandardScheme extends StandardScheme<dfsGetChunk_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, dfsGetChunk_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // FILE_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.fileId = iprot.readI64();
                struct.setFileIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // INDEX
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.index = iprot.readI64();
                struct.setIndexIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, dfsGetChunk_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(FILE_ID_FIELD_DESC);
        oprot.writeI64(struct.fileId);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(INDEX_FIELD_DESC);
        oprot.writeI64(struct.index);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class dfsGetChunk_argsTupleSchemeFactory implements SchemeFactory {
      public dfsGetChunk_argsTupleScheme getScheme() {
        return new dfsGetChunk_argsTupleScheme();
      }
    }

    private static class dfsGetChunk_argsTupleScheme extends TupleScheme<dfsGetChunk_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, dfsGetChunk_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetFileId()) {
          optionals.set(0);
        }
        if (struct.isSetIndex()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetFileId()) {
          oprot.writeI64(struct.fileId);
        }
        if (struct.isSetIndex()) {
          oprot.writeI64(struct.index);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, dfsGetChunk_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.fileId = iprot.readI64();
          struct.setFileIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.index = iprot.readI64();
          struct.setIndexIsSet(true);
        }
      }
    }

  }

  public static class dfsGetChunk_result implements org.apache.thrift.TBase<dfsGetChunk_result, dfsGetChunk_result._Fields>, java.io.Serializable, Cloneable, Comparable<dfsGetChunk_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("dfsGetChunk_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField FNE_FIELD_DESC = new org.apache.thrift.protocol.TField("fne", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField UNE_FIELD_DESC = new org.apache.thrift.protocol.TField("une", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new dfsGetChunk_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new dfsGetChunk_resultTupleSchemeFactory());
    }

    public ClientChunk success; // required
    public FileNotExistException fne; // required
    public UnknownException une; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      FNE((short)1, "fne"),
      UNE((short)2, "une");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // FNE
            return FNE;
          case 2: // UNE
            return UNE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ClientChunk.class)));
      tmpMap.put(_Fields.FNE, new org.apache.thrift.meta_data.FieldMetaData("fne", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.UNE, new org.apache.thrift.meta_data.FieldMetaData("une", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(dfsGetChunk_result.class, metaDataMap);
    }

    public dfsGetChunk_result() {
    }

    public dfsGetChunk_result(
      ClientChunk success,
      FileNotExistException fne,
      UnknownException une)
    {
      this();
      this.success = success;
      this.fne = fne;
      this.une = une;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public dfsGetChunk_result(dfsGetChunk_result other) {
      if (other.isSetSuccess()) {
        this.success = new ClientChunk(other.success);
      }
      if (other.isSetFne()) {
        this.fne = new FileNotExistException(other.fne);
      }
      if (other.isSetUne()) {
        this.une = new UnknownException(other.une);
      }
    }

    public dfsGetChunk_result deepCopy() {
      return new dfsGetChunk_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.fne = null;
      this.une = null;
    }

    public ClientChunk getSuccess() {
      return this.success;
    }

    public dfsGetChunk_result setSuccess(ClientChunk success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public FileNotExistException getFne() {
      return this.fne;
    }

    public dfsGetChunk_result setFne(FileNotExistException fne) {
      this.fne = fne;
      return this;
    }

    public void unsetFne() {
      this.fne = null;
    }

    /** Returns true if field fne is set (has been assigned a value) and false otherwise */
    public boolean isSetFne() {
      return this.fne != null;
    }

    public void setFneIsSet(boolean value) {
      if (!value) {
        this.fne = null;
      }
    }

    public UnknownException getUne() {
      return this.une;
    }

    public dfsGetChunk_result setUne(UnknownException une) {
      this.une = une;
      return this;
    }

    public void unsetUne() {
      this.une = null;
    }

    /** Returns true if field une is set (has been assigned a value) and false otherwise */
    public boolean isSetUne() {
      return this.une != null;
    }

    public void setUneIsSet(boolean value) {
      if (!value) {
        this.une = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((ClientChunk)value);
        }
        break;

      case FNE:
        if (value == null) {
          unsetFne();
        } else {
          setFne((FileNotExistException)value);
        }
        break;

      case UNE:
        if (value == null) {
          unsetUne();
        } else {
          setUne((UnknownException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case FNE:
        return getFne();

      case UNE:
        return getUne();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case FNE:
        return isSetFne();
      case UNE:
        return isSetUne();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof dfsGetChunk_result)
        return this.equals((dfsGetChunk_result)that);
      return false;
    }

    public boolean equals(dfsGetChunk_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_fne = true && this.isSetFne();
      boolean that_present_fne = true && that.isSetFne();
      if (this_present_fne || that_present_fne) {
        if (!(this_present_fne && that_present_fne))
          return false;
        if (!this.fne.equals(that.fne))
          return false;
      }

      boolean this_present_une = true && this.isSetUne();
      boolean that_present_une = true && that.isSetUne();
      if (this_present_une || that_present_une) {
        if (!(this_present_une && that_present_une))
          return false;
        if (!this.une.equals(that.une))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(dfsGetChunk_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetFne()).compareTo(other.isSetFne());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetFne()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fne, other.fne);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetUne()).compareTo(other.isSetUne());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUne()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.une, other.une);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("dfsGetChunk_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("fne:");
      if (this.fne == null) {
        sb.append("null");
      } else {
        sb.append(this.fne);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("une:");
      if (this.une == null) {
        sb.append("null");
      } else {
        sb.append(this.une);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class dfsGetChunk_resultStandardSchemeFactory implements SchemeFactory {
      public dfsGetChunk_resultStandardScheme getScheme() {
        return new dfsGetChunk_resultStandardScheme();
      }
    }

    private static class dfsGetChunk_resultStandardScheme extends StandardScheme<dfsGetChunk_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, dfsGetChunk_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new ClientChunk();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // FNE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.fne = new FileNotExistException();
                struct.fne.read(iprot);
                struct.setFneIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // UNE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.une = new UnknownException();
                struct.une.read(iprot);
                struct.setUneIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, dfsGetChunk_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.fne != null) {
          oprot.writeFieldBegin(FNE_FIELD_DESC);
          struct.fne.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.une != null) {
          oprot.writeFieldBegin(UNE_FIELD_DESC);
          struct.une.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class dfsGetChunk_resultTupleSchemeFactory implements SchemeFactory {
      public dfsGetChunk_resultTupleScheme getScheme() {
        return new dfsGetChunk_resultTupleScheme();
      }
    }

    private static class dfsGetChunk_resultTupleScheme extends TupleScheme<dfsGetChunk_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, dfsGetChunk_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetFne()) {
          optionals.set(1);
        }
        if (struct.isSetUne()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetFne()) {
          struct.fne.write(oprot);
        }
        if (struct.isSetUne()) {
          struct.une.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, dfsGetChunk_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.success = new ClientChunk();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.fne = new FileNotExistException();
          struct.fne.read(iprot);
          struct.setFneIsSet(true);
        }
        if (incoming.get(2)) {
          struct.une = new UnknownException();
          struct.une.read(iprot);
          struct.setUneIsSet(true);
        }
      }
    }

  }

  public static class dfsDelete_args implements org.apache.thrift.TBase<dfsDelete_args, dfsDelete_args._Fields>, java.io.Serializable, Cloneable, Comparable<dfsDelete_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("dfsDelete_args");

    private static final org.apache.thrift.protocol.TField FILE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("fileId", org.apache.thrift.protocol.TType.I64, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new dfsDelete_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new dfsDelete_argsTupleSchemeFactory());
    }

    public long fileId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      FILE_ID((short)1, "fileId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // FILE_ID
            return FILE_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __FILEID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.FILE_ID, new org.apache.thrift.meta_data.FieldMetaData("fileId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(dfsDelete_args.class, metaDataMap);
    }

    public dfsDelete_args() {
    }

    public dfsDelete_args(
      long fileId)
    {
      this();
      this.fileId = fileId;
      setFileIdIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public dfsDelete_args(dfsDelete_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.fileId = other.fileId;
    }

    public dfsDelete_args deepCopy() {
      return new dfsDelete_args(this);
    }

    @Override
    public void clear() {
      setFileIdIsSet(false);
      this.fileId = 0;
    }

    public long getFileId() {
      return this.fileId;
    }

    public dfsDelete_args setFileId(long fileId) {
      this.fileId = fileId;
      setFileIdIsSet(true);
      return this;
    }

    public void unsetFileId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __FILEID_ISSET_ID);
    }

    /** Returns true if field fileId is set (has been assigned a value) and false otherwise */
    public boolean isSetFileId() {
      return EncodingUtils.testBit(__isset_bitfield, __FILEID_ISSET_ID);
    }

    public void setFileIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __FILEID_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case FILE_ID:
        if (value == null) {
          unsetFileId();
        } else {
          setFileId((Long)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case FILE_ID:
        return Long.valueOf(getFileId());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case FILE_ID:
        return isSetFileId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof dfsDelete_args)
        return this.equals((dfsDelete_args)that);
      return false;
    }

    public boolean equals(dfsDelete_args that) {
      if (that == null)
        return false;

      boolean this_present_fileId = true;
      boolean that_present_fileId = true;
      if (this_present_fileId || that_present_fileId) {
        if (!(this_present_fileId && that_present_fileId))
          return false;
        if (this.fileId != that.fileId)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(dfsDelete_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetFileId()).compareTo(other.isSetFileId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetFileId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fileId, other.fileId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("dfsDelete_args(");
      boolean first = true;

      sb.append("fileId:");
      sb.append(this.fileId);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class dfsDelete_argsStandardSchemeFactory implements SchemeFactory {
      public dfsDelete_argsStandardScheme getScheme() {
        return new dfsDelete_argsStandardScheme();
      }
    }

    private static class dfsDelete_argsStandardScheme extends StandardScheme<dfsDelete_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, dfsDelete_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // FILE_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.fileId = iprot.readI64();
                struct.setFileIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, dfsDelete_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(FILE_ID_FIELD_DESC);
        oprot.writeI64(struct.fileId);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class dfsDelete_argsTupleSchemeFactory implements SchemeFactory {
      public dfsDelete_argsTupleScheme getScheme() {
        return new dfsDelete_argsTupleScheme();
      }
    }

    private static class dfsDelete_argsTupleScheme extends TupleScheme<dfsDelete_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, dfsDelete_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetFileId()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetFileId()) {
          oprot.writeI64(struct.fileId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, dfsDelete_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.fileId = iprot.readI64();
          struct.setFileIdIsSet(true);
        }
      }
    }

  }

  public static class dfsDelete_result implements org.apache.thrift.TBase<dfsDelete_result, dfsDelete_result._Fields>, java.io.Serializable, Cloneable, Comparable<dfsDelete_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("dfsDelete_result");

    private static final org.apache.thrift.protocol.TField FNE_FIELD_DESC = new org.apache.thrift.protocol.TField("fne", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField UNE_FIELD_DESC = new org.apache.thrift.protocol.TField("une", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new dfsDelete_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new dfsDelete_resultTupleSchemeFactory());
    }

    public FileNotExistException fne; // required
    public UnknownException une; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      FNE((short)1, "fne"),
      UNE((short)2, "une");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // FNE
            return FNE;
          case 2: // UNE
            return UNE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.FNE, new org.apache.thrift.meta_data.FieldMetaData("fne", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.UNE, new org.apache.thrift.meta_data.FieldMetaData("une", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(dfsDelete_result.class, metaDataMap);
    }

    public dfsDelete_result() {
    }

    public dfsDelete_result(
      FileNotExistException fne,
      UnknownException une)
    {
      this();
      this.fne = fne;
      this.une = une;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public dfsDelete_result(dfsDelete_result other) {
      if (other.isSetFne()) {
        this.fne = new FileNotExistException(other.fne);
      }
      if (other.isSetUne()) {
        this.une = new UnknownException(other.une);
      }
    }

    public dfsDelete_result deepCopy() {
      return new dfsDelete_result(this);
    }

    @Override
    public void clear() {
      this.fne = null;
      this.une = null;
    }

    public FileNotExistException getFne() {
      return this.fne;
    }

    public dfsDelete_result setFne(FileNotExistException fne) {
      this.fne = fne;
      return this;
    }

    public void unsetFne() {
      this.fne = null;
    }

    /** Returns true if field fne is set (has been assigned a value) and false otherwise */
    public boolean isSetFne() {
      return this.fne != null;
    }

    public void setFneIsSet(boolean value) {
      if (!value) {
        this.fne = null;
      }
    }

    public UnknownException getUne() {
      return this.une;
    }

    public dfsDelete_result setUne(UnknownException une) {
      this.une = une;
      return this;
    }

    public void unsetUne() {
      this.une = null;
    }

    /** Returns true if field une is set (has been assigned a value) and false otherwise */
    public boolean isSetUne() {
      return this.une != null;
    }

    public void setUneIsSet(boolean value) {
      if (!value) {
        this.une = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case FNE:
        if (value == null) {
          unsetFne();
        } else {
          setFne((FileNotExistException)value);
        }
        break;

      case UNE:
        if (value == null) {
          unsetUne();
        } else {
          setUne((UnknownException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case FNE:
        return getFne();

      case UNE:
        return getUne();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case FNE:
        return isSetFne();
      case UNE:
        return isSetUne();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof dfsDelete_result)
        return this.equals((dfsDelete_result)that);
      return false;
    }

    public boolean equals(dfsDelete_result that) {
      if (that == null)
        return false;

      boolean this_present_fne = true && this.isSetFne();
      boolean that_present_fne = true && that.isSetFne();
      if (this_present_fne || that_present_fne) {
        if (!(this_present_fne && that_present_fne))
          return false;
        if (!this.fne.equals(that.fne))
          return false;
      }

      boolean this_present_une = true && this.isSetUne();
      boolean that_present_une = true && that.isSetUne();
      if (this_present_une || that_present_une) {
        if (!(this_present_une && that_present_une))
          return false;
        if (!this.une.equals(that.une))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(dfsDelete_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetFne()).compareTo(other.isSetFne());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetFne()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fne, other.fne);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetUne()).compareTo(other.isSetUne());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUne()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.une, other.une);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("dfsDelete_result(");
      boolean first = true;

      sb.append("fne:");
      if (this.fne == null) {
        sb.append("null");
      } else {
        sb.append(this.fne);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("une:");
      if (this.une == null) {
        sb.append("null");
      } else {
        sb.append(this.une);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class dfsDelete_resultStandardSchemeFactory implements SchemeFactory {
      public dfsDelete_resultStandardScheme getScheme() {
        return new dfsDelete_resultStandardScheme();
      }
    }

    private static class dfsDelete_resultStandardScheme extends StandardScheme<dfsDelete_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, dfsDelete_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // FNE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.fne = new FileNotExistException();
                struct.fne.read(iprot);
                struct.setFneIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // UNE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.une = new UnknownException();
                struct.une.read(iprot);
                struct.setUneIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, dfsDelete_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.fne != null) {
          oprot.writeFieldBegin(FNE_FIELD_DESC);
          struct.fne.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.une != null) {
          oprot.writeFieldBegin(UNE_FIELD_DESC);
          struct.une.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class dfsDelete_resultTupleSchemeFactory implements SchemeFactory {
      public dfsDelete_resultTupleScheme getScheme() {
        return new dfsDelete_resultTupleScheme();
      }
    }

    private static class dfsDelete_resultTupleScheme extends TupleScheme<dfsDelete_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, dfsDelete_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetFne()) {
          optionals.set(0);
        }
        if (struct.isSetUne()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetFne()) {
          struct.fne.write(oprot);
        }
        if (struct.isSetUne()) {
          struct.une.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, dfsDelete_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.fne = new FileNotExistException();
          struct.fne.read(iprot);
          struct.setFneIsSet(true);
        }
        if (incoming.get(1)) {
          struct.une = new UnknownException();
          struct.une.read(iprot);
          struct.setUneIsSet(true);
        }
      }
    }

  }

  public static class dfsRename_args implements org.apache.thrift.TBase<dfsRename_args, dfsRename_args._Fields>, java.io.Serializable, Cloneable, Comparable<dfsRename_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("dfsRename_args");

    private static final org.apache.thrift.protocol.TField FILE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("fileId", org.apache.thrift.protocol.TType.I64, (short)1);
    private static final org.apache.thrift.protocol.TField NEW_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("newName", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new dfsRename_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new dfsRename_argsTupleSchemeFactory());
    }

    public long fileId; // required
    public String newName; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      FILE_ID((short)1, "fileId"),
      NEW_NAME((short)2, "newName");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // FILE_ID
            return FILE_ID;
          case 2: // NEW_NAME
            return NEW_NAME;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __FILEID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.FILE_ID, new org.apache.thrift.meta_data.FieldMetaData("fileId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.NEW_NAME, new org.apache.thrift.meta_data.FieldMetaData("newName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(dfsRename_args.class, metaDataMap);
    }

    public dfsRename_args() {
    }

    public dfsRename_args(
      long fileId,
      String newName)
    {
      this();
      this.fileId = fileId;
      setFileIdIsSet(true);
      this.newName = newName;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public dfsRename_args(dfsRename_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.fileId = other.fileId;
      if (other.isSetNewName()) {
        this.newName = other.newName;
      }
    }

    public dfsRename_args deepCopy() {
      return new dfsRename_args(this);
    }

    @Override
    public void clear() {
      setFileIdIsSet(false);
      this.fileId = 0;
      this.newName = null;
    }

    public long getFileId() {
      return this.fileId;
    }

    public dfsRename_args setFileId(long fileId) {
      this.fileId = fileId;
      setFileIdIsSet(true);
      return this;
    }

    public void unsetFileId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __FILEID_ISSET_ID);
    }

    /** Returns true if field fileId is set (has been assigned a value) and false otherwise */
    public boolean isSetFileId() {
      return EncodingUtils.testBit(__isset_bitfield, __FILEID_ISSET_ID);
    }

    public void setFileIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __FILEID_ISSET_ID, value);
    }

    public String getNewName() {
      return this.newName;
    }

    public dfsRename_args setNewName(String newName) {
      this.newName = newName;
      return this;
    }

    public void unsetNewName() {
      this.newName = null;
    }

    /** Returns true if field newName is set (has been assigned a value) and false otherwise */
    public boolean isSetNewName() {
      return this.newName != null;
    }

    public void setNewNameIsSet(boolean value) {
      if (!value) {
        this.newName = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case FILE_ID:
        if (value == null) {
          unsetFileId();
        } else {
          setFileId((Long)value);
        }
        break;

      case NEW_NAME:
        if (value == null) {
          unsetNewName();
        } else {
          setNewName((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case FILE_ID:
        return Long.valueOf(getFileId());

      case NEW_NAME:
        return getNewName();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case FILE_ID:
        return isSetFileId();
      case NEW_NAME:
        return isSetNewName();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof dfsRename_args)
        return this.equals((dfsRename_args)that);
      return false;
    }

    public boolean equals(dfsRename_args that) {
      if (that == null)
        return false;

      boolean this_present_fileId = true;
      boolean that_present_fileId = true;
      if (this_present_fileId || that_present_fileId) {
        if (!(this_present_fileId && that_present_fileId))
          return false;
        if (this.fileId != that.fileId)
          return false;
      }

      boolean this_present_newName = true && this.isSetNewName();
      boolean that_present_newName = true && that.isSetNewName();
      if (this_present_newName || that_present_newName) {
        if (!(this_present_newName && that_present_newName))
          return false;
        if (!this.newName.equals(that.newName))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(dfsRename_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetFileId()).compareTo(other.isSetFileId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetFileId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fileId, other.fileId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetNewName()).compareTo(other.isSetNewName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetNewName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.newName, other.newName);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("dfsRename_args(");
      boolean first = true;

      sb.append("fileId:");
      sb.append(this.fileId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("newName:");
      if (this.newName == null) {
        sb.append("null");
      } else {
        sb.append(this.newName);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class dfsRename_argsStandardSchemeFactory implements SchemeFactory {
      public dfsRename_argsStandardScheme getScheme() {
        return new dfsRename_argsStandardScheme();
      }
    }

    private static class dfsRename_argsStandardScheme extends StandardScheme<dfsRename_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, dfsRename_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // FILE_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.fileId = iprot.readI64();
                struct.setFileIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // NEW_NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.newName = iprot.readString();
                struct.setNewNameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, dfsRename_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(FILE_ID_FIELD_DESC);
        oprot.writeI64(struct.fileId);
        oprot.writeFieldEnd();
        if (struct.newName != null) {
          oprot.writeFieldBegin(NEW_NAME_FIELD_DESC);
          oprot.writeString(struct.newName);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class dfsRename_argsTupleSchemeFactory implements SchemeFactory {
      public dfsRename_argsTupleScheme getScheme() {
        return new dfsRename_argsTupleScheme();
      }
    }

    private static class dfsRename_argsTupleScheme extends TupleScheme<dfsRename_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, dfsRename_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetFileId()) {
          optionals.set(0);
        }
        if (struct.isSetNewName()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetFileId()) {
          oprot.writeI64(struct.fileId);
        }
        if (struct.isSetNewName()) {
          oprot.writeString(struct.newName);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, dfsRename_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.fileId = iprot.readI64();
          struct.setFileIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.newName = iprot.readString();
          struct.setNewNameIsSet(true);
        }
      }
    }

  }

  public static class dfsRename_result implements org.apache.thrift.TBase<dfsRename_result, dfsRename_result._Fields>, java.io.Serializable, Cloneable, Comparable<dfsRename_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("dfsRename_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField FNE_FIELD_DESC = new org.apache.thrift.protocol.TField("fne", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField UNE_FIELD_DESC = new org.apache.thrift.protocol.TField("une", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new dfsRename_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new dfsRename_resultTupleSchemeFactory());
    }

    public ClientFile success; // required
    public FileNotExistException fne; // required
    public UnknownException une; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      FNE((short)1, "fne"),
      UNE((short)2, "une");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // FNE
            return FNE;
          case 2: // UNE
            return UNE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ClientFile.class)));
      tmpMap.put(_Fields.FNE, new org.apache.thrift.meta_data.FieldMetaData("fne", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.UNE, new org.apache.thrift.meta_data.FieldMetaData("une", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(dfsRename_result.class, metaDataMap);
    }

    public dfsRename_result() {
    }

    public dfsRename_result(
      ClientFile success,
      FileNotExistException fne,
      UnknownException une)
    {
      this();
      this.success = success;
      this.fne = fne;
      this.une = une;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public dfsRename_result(dfsRename_result other) {
      if (other.isSetSuccess()) {
        this.success = new ClientFile(other.success);
      }
      if (other.isSetFne()) {
        this.fne = new FileNotExistException(other.fne);
      }
      if (other.isSetUne()) {
        this.une = new UnknownException(other.une);
      }
    }

    public dfsRename_result deepCopy() {
      return new dfsRename_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.fne = null;
      this.une = null;
    }

    public ClientFile getSuccess() {
      return this.success;
    }

    public dfsRename_result setSuccess(ClientFile success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public FileNotExistException getFne() {
      return this.fne;
    }

    public dfsRename_result setFne(FileNotExistException fne) {
      this.fne = fne;
      return this;
    }

    public void unsetFne() {
      this.fne = null;
    }

    /** Returns true if field fne is set (has been assigned a value) and false otherwise */
    public boolean isSetFne() {
      return this.fne != null;
    }

    public void setFneIsSet(boolean value) {
      if (!value) {
        this.fne = null;
      }
    }

    public UnknownException getUne() {
      return this.une;
    }

    public dfsRename_result setUne(UnknownException une) {
      this.une = une;
      return this;
    }

    public void unsetUne() {
      this.une = null;
    }

    /** Returns true if field une is set (has been assigned a value) and false otherwise */
    public boolean isSetUne() {
      return this.une != null;
    }

    public void setUneIsSet(boolean value) {
      if (!value) {
        this.une = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((ClientFile)value);
        }
        break;

      case FNE:
        if (value == null) {
          unsetFne();
        } else {
          setFne((FileNotExistException)value);
        }
        break;

      case UNE:
        if (value == null) {
          unsetUne();
        } else {
          setUne((UnknownException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case FNE:
        return getFne();

      case UNE:
        return getUne();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case FNE:
        return isSetFne();
      case UNE:
        return isSetUne();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof dfsRename_result)
        return this.equals((dfsRename_result)that);
      return false;
    }

    public boolean equals(dfsRename_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_fne = true && this.isSetFne();
      boolean that_present_fne = true && that.isSetFne();
      if (this_present_fne || that_present_fne) {
        if (!(this_present_fne && that_present_fne))
          return false;
        if (!this.fne.equals(that.fne))
          return false;
      }

      boolean this_present_une = true && this.isSetUne();
      boolean that_present_une = true && that.isSetUne();
      if (this_present_une || that_present_une) {
        if (!(this_present_une && that_present_une))
          return false;
        if (!this.une.equals(that.une))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(dfsRename_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetFne()).compareTo(other.isSetFne());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetFne()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fne, other.fne);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetUne()).compareTo(other.isSetUne());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUne()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.une, other.une);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("dfsRename_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("fne:");
      if (this.fne == null) {
        sb.append("null");
      } else {
        sb.append(this.fne);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("une:");
      if (this.une == null) {
        sb.append("null");
      } else {
        sb.append(this.une);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class dfsRename_resultStandardSchemeFactory implements SchemeFactory {
      public dfsRename_resultStandardScheme getScheme() {
        return new dfsRename_resultStandardScheme();
      }
    }

    private static class dfsRename_resultStandardScheme extends StandardScheme<dfsRename_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, dfsRename_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new ClientFile();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // FNE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.fne = new FileNotExistException();
                struct.fne.read(iprot);
                struct.setFneIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // UNE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.une = new UnknownException();
                struct.une.read(iprot);
                struct.setUneIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, dfsRename_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.fne != null) {
          oprot.writeFieldBegin(FNE_FIELD_DESC);
          struct.fne.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.une != null) {
          oprot.writeFieldBegin(UNE_FIELD_DESC);
          struct.une.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class dfsRename_resultTupleSchemeFactory implements SchemeFactory {
      public dfsRename_resultTupleScheme getScheme() {
        return new dfsRename_resultTupleScheme();
      }
    }

    private static class dfsRename_resultTupleScheme extends TupleScheme<dfsRename_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, dfsRename_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetFne()) {
          optionals.set(1);
        }
        if (struct.isSetUne()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetFne()) {
          struct.fne.write(oprot);
        }
        if (struct.isSetUne()) {
          struct.une.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, dfsRename_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.success = new ClientFile();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.fne = new FileNotExistException();
          struct.fne.read(iprot);
          struct.setFneIsSet(true);
        }
        if (incoming.get(2)) {
          struct.une = new UnknownException();
          struct.une.read(iprot);
          struct.setUneIsSet(true);
        }
      }
    }

  }

}
